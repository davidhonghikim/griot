#!/usr/bin/env tsx

/**
 * PersonaRAG Bridge Server
 * 
 * Connects PersonaRAG engine to OpenWebUI for persona-aware AI interactions
 * Provides REST API and WebSocket endpoints for real-time persona selection
 */

import express from 'express';
import cors from 'cors';
import { createServer } from 'http';
import { Server } from 'socket.io';
import { OpenWebUIBridge } from './services/openwebui-bridge.service.js';
import { getVault } from './vault/secure-vault.js';
import dotenv from 'dotenv';
import { PersonaRAGService } from '@griot/data/rag/persona_rag_service';
import { VectorStore } from '@griot/data/rag/vector_store';
import { EmbeddingService } from '@griot/data/rag/embedding_service';
import { PersonaVectorizationService } from '@griot/data/rag/persona_vectorization_service';
import { PersonaLoader } from '@griot/data/persona_loader';
import { ServiceConfig, ServiceManager } from './config/service-config';

// Load environment variables
dotenv.config();

const app = express();
const server = createServer(app);
const io = new Server(server, {
  cors: {
    origin: true,
    methods: ["GET", "POST"]
  }
});

// Middleware
app.use(cors({
  origin: true,
  credentials: true
}));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Initialize services
let personaRAGService: PersonaRAGService;
let openWebUIBridge: OpenWebUIBridge;
let serviceManager: ServiceManager;
let syncManager: SyncManager;

// Initialize vault and services
async function initializeServices() {
  try {
    console.log('🔐 Initializing secure vault...');
    const vault = getVault();
    await vault.initialize();
    
    // Validate vault security
    const validation = await vault.validateSecurity();
    if (!validation.valid) {
      console.warn('⚠️ Vault security issues detected:');
      validation.issues.forEach(issue => console.warn(`  • ${issue}`));
      console.warn('💡 Run "npm run vault:validate" to see recommendations');
    }
    
    // Get OpenWebUI configuration from vault
    const openWebUIUrl = await vault.getSecret('OPENWEBUI_URL') || 'http://192.168.1.180:3000';
    const openWebUIApiKey = await vault.getSecret('OPENWEBUI_API_KEY');
    
    console.log(`🌐 OpenWebUI URL: ${openWebUIUrl}`);
    
    if (!openWebUIApiKey) {
      console.warn('⚠️ OpenWebUI API key not configured');
      console.warn('💡 Run "npm run vault:set OPENWEBUI_API_KEY" to configure');
    }
    
    // Get OpenAI API key from vault and set as environment variable
    const openaiApiKey = await vault.getSecret('OPENAI_API_KEY');
    if (!openaiApiKey) {
      console.warn('⚠️ OpenAI API key not configured');
      console.warn('💡 Run "npm run vault:set OPENAI_API_KEY" to configure');
      console.warn('💡 Using mock embedding service for testing');
      // Set a mock key for testing
      process.env.OPENAI_API_KEY = openaiApiKey || 'sk-dae28e6035904cecb2737fbc54768d16';
    } else {
      process.env.OPENAI_API_KEY = openaiApiKey;
      console.log('✅ OpenAI API key loaded from vault');
    }
    
    // Initialize core RAG services
    const vectorStore = new VectorStore();
    const embeddingService = new EmbeddingService();
    const personaLoader = new PersonaLoader();
    const personaVectorization = new PersonaVectorizationService({
      vectorStore,
      embeddingService,
      personaLoader
    });
    
    // Initialize PersonaRAG service
    personaRAGService = new PersonaRAGService(vectorStore, embeddingService, personaVectorization);
    await personaRAGService.initialize();
    
    // Initialize OpenWebUI bridge
    openWebUIBridge = new OpenWebUIBridge(
      {
        url: openWebUIUrl,
        apiKey: 'sk-dae28e6035904cecb2737fbc54768d16'
      },
      personaRAGService
    );
    
    // Initialize service manager
    serviceManager = new ServiceManager();
    
    // Initialize sync manager
    syncManager = new SyncManager({
      ...defaultSyncConfig,
      deviceId: process.env.DEVICE_ID || `server_${Date.now()}`,
      deviceType: 'server',
      deviceName: 'PersonaRAG Server',
      storage: {
        ...defaultSyncConfig.storage,
        server: {
          ...defaultSyncConfig.storage.server,
          url: `http://localhost:${process.env.PORT || 30436}`
        }
      }
    });
    
    console.log('✅ Services initialized successfully');
    
  } catch (error) {
    console.error('❌ Failed to initialize services:', error);
    process.exit(1);
  }
}

// Health check endpoint
app.get('/health', (_req, res) => {
  res.json({ status: 'healthy', timestamp: new Date() });
});

// Vault status endpoint (protected)
app.get('/vault/status', async (_req, res) => {
  try {
    const vault = getVault();
    const secrets = await vault.listSecrets();
    const validation = await vault.validateSecurity();
    
    res.json({
      totalSecrets: secrets.length,
      securityStatus: validation.valid ? 'secure' : 'issues_found',
      issues: validation.issues
    });
  } catch (error) {
    res.status(500).json({ error: 'Failed to get vault status' });
  }
});

// Persona query endpoint
app.post('/api/personas/query', async (req, res) => {
  try {
    const { query, limit = 5, threshold = 0.6 } = req.body;
    
    if (!query) {
      return res.status(400).json({ error: 'Query is required' });
    }
    
    const request = {
      query,
      limit,
      similarityThreshold: threshold
    };
    
    const response = await personaRAGService.query(request);
    return res.json(response);
    
  } catch (error) {
    console.error('Error querying personas:', error);
    return res.status(500).json({ error: 'Failed to query personas' });
  }
});

// Persona selection endpoint
app.post('/api/personas/select', async (req, res) => {
  try {
    const { personaId, context } = req.body;
    
    if (!personaId) {
      return res.status(400).json({ error: 'Persona ID is required' });
    }
    
    const request = {
      query: context || 'general context',
      personaId,
      limit: 1
    };
    
    const response = await personaRAGService.query(request);
    return res.json(response);
    
  } catch (error) {
    console.error('Error selecting persona:', error);
    return res.status(500).json({ error: 'Failed to select persona' });
  }
});

// Service management endpoints
app.get('/api/services', (_req, res) => {
  try {
    const services = serviceManager.getAllServices();
    const defaultService = serviceManager.getDefaultService();
    
    res.json({
      services,
      defaultService: defaultService?.name,
      totalServices: services.length,
      enabledServices: services.filter(s => s.enabled).length
    });
  } catch (error) {
    console.error('Error getting services:', error);
    res.status(500).json({ error: 'Failed to get services' });
  }
});

app.post('/api/services', async (req, res) => {
  try {
    const service: ServiceConfig = req.body;
    
    // Validate service configuration
    const validation = serviceManager.validateService(service);
    if (!validation.valid) {
      return res.status(400).json({ 
        error: 'Invalid service configuration', 
        details: validation.errors 
      });
    }
    
    serviceManager.addService(service);
    
    res.json({ 
      message: 'Service added successfully',
      service: serviceManager.getService(service.name)
    });
  } catch (error) {
    console.error('Error adding service:', error);
    res.status(500).json({ error: 'Failed to add service' });
  }
});

app.put('/api/services/:name', async (req, res) => {
  try {
    const { name } = req.params;
    const updates: Partial<ServiceConfig> = req.body;
    
    const existingService = serviceManager.getService(name);
    if (!existingService) {
      return res.status(404).json({ error: 'Service not found' });
    }
    
    const updatedService = { ...existingService, ...updates };
    const validation = serviceManager.validateService(updatedService);
    if (!validation.valid) {
      return res.status(400).json({ 
        error: 'Invalid service configuration', 
        details: validation.errors 
      });
    }
    
    serviceManager.addService(updatedService);
    
    res.json({ 
      message: 'Service updated successfully',
      service: updatedService
    });
  } catch (error) {
    console.error('Error updating service:', error);
    res.status(500).json({ error: 'Failed to update service' });
  }
});

app.delete('/api/services/:name', async (req, res) => {
  try {
    const { name } = req.params;
    
    const existingService = serviceManager.getService(name);
    if (!existingService) {
      return res.status(404).json({ error: 'Service not found' });
    }
    
    serviceManager.removeService(name);
    
    res.json({ message: 'Service removed successfully' });
  } catch (error) {
    console.error('Error removing service:', error);
    res.status(500).json({ error: 'Failed to remove service' });
  }
});

app.post('/api/services/default', async (req, res) => {
  try {
    const { name } = req.body;
    
    const service = serviceManager.getService(name);
    if (!service) {
      return res.status(404).json({ error: 'Service not found' });
    }
    
    serviceManager.setDefaultService(name);
    
    res.json({ 
      message: 'Default service updated successfully',
      defaultService: service
    });
  } catch (error) {
    console.error('Error setting default service:', error);
    res.status(500).json({ error: 'Failed to set default service' });
  }
});

// Enhanced chat endpoint that uses any available service
app.post('/api/chat/enhanced', async (req, res) => {
  try {
    const { message, personaId, conversationHistory = [], serviceName } = req.body;
    
    if (!message) {
      return res.status(400).json({ error: 'Message is required' });
    }
    
    // Use specified service or default service
    const service = serviceName 
      ? serviceManager.getService(serviceName)
      : serviceManager.getDefaultService();
    
    if (!service) {
      return res.status(400).json({ error: 'No available service found' });
    }
    
    // Route to appropriate service based on type
    let response;
    switch (service.type) {
      case 'openwebui':
        response = await openWebUIBridge.enhancedChat(message, personaId, conversationHistory);
        break;
      case 'ollama':
        // TODO: Implement Ollama bridge
        response = { message: 'Ollama integration coming soon', service: service.name };
        break;
      case 'openai':
        // TODO: Implement OpenAI bridge
        response = { message: 'OpenAI integration coming soon', service: service.name };
        break;
      default:
        response = { message: 'Service type not yet implemented', service: service.name };
    }
    
    return res.json(response);
    
  } catch (error) {
    console.error('Error in enhanced chat:', error);
    return res.status(500).json({ error: 'Failed to process enhanced chat' });
  }
});

// OpenWebUI integration endpoints
app.post('/api/openwebui/chat', async (req, res) => {
  try {
    const { message, personaId, model = 'llama3.1' } = req.body;
    
    if (!message) {
      return res.status(400).json({ error: 'Message is required' });
    }
    
    const response = await openWebUIBridge.sendChatMessage(message, personaId, model);
    return res.json(response);
    
  } catch (error) {
    console.error('Error sending chat message:', error);
    return res.status(500).json({ error: 'Failed to send chat message' });
  }
});

// Sync endpoints
app.post('/api/sync', async (req, res) => {
  try {
    const message: SyncMessage = req.body;
    
    // Store the sync message
    await storeSyncMessage(message);
    
    // Broadcast to other connected devices
    io.emit('sync-message', message);
    
    res.json({ success: true, message: 'Sync message processed' });
  } catch (error) {
    console.error('Error processing sync message:', error);
    res.status(500).json({ error: 'Failed to process sync message' });
  }
});

app.get('/api/sync/updates', async (req, res) => {
  try {
    const deviceId = req.query.deviceId as string;
    const lastSync = req.query.lastSync as string;
    
    // Get updates since last sync
    const updates = await getSyncUpdates(deviceId, lastSync);
    
    res.json(updates);
  } catch (error) {
    console.error('Error getting sync updates:', error);
    res.status(500).json({ error: 'Failed to get sync updates' });
  }
});

app.get('/api/sessions', async (_req, res) => {
  try {
    const sessions = syncManager.getSessions();
    res.json(sessions);
  } catch (error) {
    console.error('Error getting sessions:', error);
    res.status(500).json({ error: 'Failed to get sessions' });
  }
});

app.post('/api/sessions', async (req, res) => {
  try {
    const { type, title, data } = req.body;
    const sessionId = await syncManager.createSession(type, title, data);
    
    res.json({ sessionId, success: true });
  } catch (error) {
    console.error('Error creating session:', error);
    res.status(500).json({ error: 'Failed to create session' });
  }
});

app.put('/api/sessions/:sessionId', async (req, res) => {
  try {
    const { sessionId } = req.params;
    const { data } = req.body;
    
    await syncManager.updateSession(sessionId, data);
    
    res.json({ success: true });
  } catch (error) {
    console.error('Error updating session:', error);
    res.status(500).json({ error: 'Failed to update session' });
  }
});

app.delete('/api/sessions/:sessionId', async (req, res) => {
  try {
    const { sessionId } = req.params;
    
    await syncManager.deleteSession(sessionId);
    
    res.json({ success: true });
  } catch (error) {
    console.error('Error deleting session:', error);
    res.status(500).json({ error: 'Failed to delete session' });
  }
});

// WebSocket connection for real-time communication
io.on('connection', (socket) => {
  console.log('🔌 Client connected:', socket.id);
  
  socket.on('query-personas', async (data) => {
    try {
      const { query, limit = 5, threshold = 0.6 } = data;
      const request = { query, limit, similarityThreshold: threshold };
      const response = await personaRAGService.query(request);
      socket.emit('personas-result', response);
    } catch (error) {
      socket.emit('error', { message: 'Failed to query personas' });
    }
  });
  
  socket.on('select-persona', async (data) => {
    try {
      const { personaId, context } = data;
      const request = { query: context || 'general context', personaId, limit: 1 };
      const response = await personaRAGService.query(request);
      socket.emit('persona-selected', response);
    } catch (error) {
      socket.emit('error', { message: 'Failed to select persona' });
    }
  });
  
  socket.on('enhanced-chat', async (data) => {
    try {
      const { message, personaId, conversationHistory = [] } = data;
      const response = await openWebUIBridge.enhancedChat(message, personaId, conversationHistory);
      socket.emit('chat-response', response);
    } catch (error) {
      socket.emit('error', { message: 'Failed to process enhanced chat' });
    }
  });
  
  socket.on('sync-message', async (message: SyncMessage) => {
    try {
      // Process sync message
      await storeSyncMessage(message);
      
      // Broadcast to other clients
      socket.broadcast.emit('sync-message', message);
    } catch (error) {
      socket.emit('error', { message: 'Failed to process sync message' });
    }
  });
  
  socket.on('join-session', async (sessionId: string) => {
    try {
      const session = syncManager.getSession(sessionId);
      if (session) {
        socket.join(`session_${sessionId}`);
        socket.emit('session-joined', session);
        
        // Notify other participants
        socket.to(`session_${sessionId}`).emit('participant-joined', {
          deviceId: socket.id,
          sessionId
        });
      }
    } catch (error) {
      socket.emit('error', { message: 'Failed to join session' });
    }
  });
  
  socket.on('leave-session', (sessionId: string) => {
    socket.leave(`session_${sessionId}`);
    socket.to(`session_${sessionId}`).emit('participant-left', {
      deviceId: socket.id,
      sessionId
    });
  });
  
  socket.on('disconnect', () => {
    console.log('🔌 Client disconnected:', socket.id);
  });
});

// Start server
async function startServer() {
  try {
    await initializeServices();
    
    const port = process.env.PORT || 3000;
    server.listen(port, () => {
      console.log(`🚀 PersonaRAG Bridge Server running on port ${port}`);
      console.log(`📡 WebSocket server ready for real-time communication`);
      console.log(`🔐 Secure vault system operational`);
      console.log(`🤖 PersonaRAG service initialized`);
      console.log(`🌐 OpenWebUI bridge ready`);
    });
    
  } catch (error) {
    console.error('❌ Failed to start server:', error);
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('\n🛑 Shutting down gracefully...');
  if (personaRAGService) {
    await personaRAGService.cleanup();
  }
  process.exit(0);
});

// Start the server
startServer();

// Helper functions for sync storage
async function storeSyncMessage(message: SyncMessage): Promise<void> {
  // Store in local database (implement with your preferred database)
  console.log('Storing sync message:', message);
  // This would be implemented with actual database storage
}

async function getSyncUpdates(deviceId: string, lastSync?: string): Promise<SyncMessage[]> {
  // Get updates since last sync (implement with your preferred database)
  console.log('Getting sync updates for device:', deviceId, 'since:', lastSync);
  // This would be implemented with actual database queries
  return [];
}
