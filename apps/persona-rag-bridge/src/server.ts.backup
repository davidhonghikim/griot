#!/usr/bin/env tsx

/**
 * PersonaRAG Bridge Server
 * 
 * Connects PersonaRAG engine to OpenWebUI for persona-aware AI interactions
 * Provides REST API and WebSocket endpoints for real-time persona selection
 */

import express from 'express';
import cors from 'cors';
import { createServer } from 'http';
import { Server } from 'socket.io';
import { OpenWebUIBridge } from './services/openwebui-bridge.service.js';
import { getVault } from './vault/secure-vault.js';
import dotenv from 'dotenv';
import { PersonaRAGService } from '@griot/data/rag/persona_rag_service';
import { VectorStore } from '@griot/data/rag/vector_store';
import { EmbeddingService } from '@griot/data/rag/embedding_service';
import { PersonaVectorizationService } from '@griot/data/rag/persona_vectorization_service';
import { PersonaLoader } from '@griot/data/persona_loader';

// Load environment variables
dotenv.config();

const app = express();
const server = createServer(app);
const io = new Server(server, {
  cors: {
    origin: ["http://192.168.1.180:3000", "http://localhost:3000", "http://127.0.0.1:3000"],
    methods: ["GET", "POST"]
  }
});

// Middleware
app.use(cors({
  origin: ["http://192.168.1.180:3000", "http://localhost:3000", "http://127.0.0.1:3000"],
  credentials: true
}));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Initialize services
let personaRAGService: PersonaRAGService;
let openWebUIBridge: OpenWebUIBridge;

// Initialize vault and services
async function initializeServices() {
  try {
    console.log('🔐 Initializing secure vault...');
    const vault = getVault();
    await vault.initialize();
    
    // Validate vault security
    const validation = await vault.validateSecurity();
    if (!validation.valid) {
      console.warn('⚠️ Vault security issues detected:');
      validation.issues.forEach(issue => console.warn(`  • ${issue}`));
      console.warn('💡 Run "npm run vault:validate" to see recommendations');
    }
    
    // Get OpenWebUI configuration from vault
    const openWebUIUrl = await vault.getSecret('OPENWEBUI_URL') || 'http://192.168.1.180:3000';
    const openWebUIApiKey = await vault.getSecret('OPENWEBUI_API_KEY');
    
    console.log(`🌐 OpenWebUI URL: ${openWebUIUrl}`);
    
    if (!openWebUIApiKey) {
      console.warn('⚠️ OpenWebUI API key not configured');
      console.warn('💡 Run "npm run vault:set OPENWEBUI_API_KEY" to configure');
    }
    
    // Get OpenAI API key from vault and set as environment variable
    const openaiApiKey = await vault.getSecret('OPENAI_API_KEY');
    if (!openaiApiKey) {
      console.warn('⚠️ OpenAI API key not configured');
      console.warn('💡 Run "npm run vault:set OPENAI_API_KEY" to configure');
      console.warn('💡 Using mock embedding service for testing');
      // Set a mock key for testing
      process.env.OPENAI_API_KEY = openaiApiKey || 'sk-dae28e6035904cecb2737fbc54768d16';
    } else {
      process.env.OPENAI_API_KEY = openaiApiKey;
      console.log('✅ OpenAI API key loaded from vault');
    }
    
    // Initialize core RAG services
    const vectorStore = new VectorStore();
    const embeddingService = new EmbeddingService();
    const personaLoader = new PersonaLoader();
    const personaVectorization = new PersonaVectorizationService({
      vectorStore,
      embeddingService,
      personaLoader
    });
    
    // Initialize PersonaRAG service
    personaRAGService = new PersonaRAGService(vectorStore, embeddingService, personaVectorization);
    await personaRAGService.initialize();
    
    // Initialize OpenWebUI bridge
    openWebUIBridge = new OpenWebUIBridge(
      {
        url: 'http://192.168.1.180:3000',
        apiKey: 'sk-dae28e6035904cecb2737fbc54768d16'
      },
      personaRAGService
    );
    
    console.log('✅ Services initialized successfully');
    
  } catch (error) {
    console.error('❌ Failed to initialize services:', error);
    process.exit(1);
  }
}

// Health check endpoint
app.get('/health', (_req, res) => {
  res.json({ status: 'healthy', timestamp: new Date() });
});

// Vault status endpoint (protected)
app.get('/vault/status', async (_req, res) => {
  try {
    const vault = getVault();
    const secrets = await vault.listSecrets();
    const validation = await vault.validateSecurity();
    
    res.json({
      totalSecrets: secrets.length,
      securityStatus: validation.valid ? 'secure' : 'issues_found',
      issues: validation.issues
    });
  } catch (error) {
    res.status(500).json({ error: 'Failed to get vault status' });
  }
});

// Persona query endpoint
app.post('/api/personas/query', async (req, res) => {
  try {
    const { query, limit = 5, threshold = 0.6 } = req.body;
    
    if (!query) {
      return res.status(400).json({ error: 'Query is required' });
    }
    
    const request = {
      query,
      limit,
      similarityThreshold: threshold
    };
    
    const response = await personaRAGService.query(request);
    return res.json(response);
    
  } catch (error) {
    console.error('Error querying personas:', error);
    return res.status(500).json({ error: 'Failed to query personas' });
  }
});

// Persona selection endpoint
app.post('/api/personas/select', async (req, res) => {
  try {
    const { personaId, context } = req.body;
    
    if (!personaId) {
      return res.status(400).json({ error: 'Persona ID is required' });
    }
    
    const request = {
      query: context || 'general context',
      personaId,
      limit: 1
    };
    
    const response = await personaRAGService.query(request);
    return res.json(response);
    
  } catch (error) {
    console.error('Error selecting persona:', error);
    return res.status(500).json({ error: 'Failed to select persona' });
  }
});

// Enhanced chat endpoint
app.post('/api/chat/enhanced', async (req, res) => {
  try {
    const { message, personaId, conversationHistory = [] } = req.body;
    
    if (!message) {
      return res.status(400).json({ error: 'Message is required' });
    }
    
    const response = await openWebUIBridge.enhancedChat(message, personaId, conversationHistory);
    return res.json(response);
    
  } catch (error) {
    console.error('Error in enhanced chat:', error);
    return res.status(500).json({ error: 'Failed to process enhanced chat' });
  }
});

// OpenWebUI integration endpoints
app.post('/api/openwebui/chat', async (req, res) => {
  try {
    const { message, personaId, model = 'llama3.1' } = req.body;
    
    if (!message) {
      return res.status(400).json({ error: 'Message is required' });
    }
    
    const response = await openWebUIBridge.sendChatMessage(message, personaId, model);
    return res.json(response);
    
  } catch (error) {
    console.error('Error sending chat message:', error);
    return res.status(500).json({ error: 'Failed to send chat message' });
  }
});

// WebSocket connection for real-time communication
io.on('connection', (socket: any) => {
  console.log('🔌 Client connected:', socket.id);
  
  socket.on('query-personas', async (data: any) => {
    try {
      const { query, limit = 5, threshold = 0.6 } = data;
      const request = { query, limit, similarityThreshold: threshold };
      const response = await personaRAGService.query(request);
      socket.emit('personas-result', response);
    } catch (error) {
      socket.emit('error', { message: 'Failed to query personas' });
    }
  });
  
  socket.on('select-persona', async (data: any) => {
    try {
      const { personaId, context } = data;
      const request = { query: context || 'general context', personaId, limit: 1 };
      const response = await personaRAGService.query(request);
      socket.emit('persona-selected', response);
    } catch (error) {
      socket.emit('error', { message: 'Failed to select persona' });
    }
  });
  
  socket.on('enhanced-chat', async (data: any) => {
    try {
      const { message, personaId, conversationHistory = [] } = data;
      const response = await openWebUIBridge.enhancedChat(message, personaId, conversationHistory);
      socket.emit('chat-response', response);
    } catch (error) {
      socket.emit('error', { message: 'Failed to process enhanced chat' });
    }
  });
  
  socket.on('disconnect', () => {
    console.log('🔌 Client disconnected:', socket.id);
  });
});

// Start server
async function startServer() {
  try {
    await initializeServices();
    
    const port = process.env.PORT || 30436;
    server.listen(port, () => {
      console.log(`🚀 PersonaRAG Bridge Server running on port ${port}`);
      console.log(`📡 WebSocket server ready for real-time communication`);
      console.log(`🔐 Secure vault system operational`);
      console.log(`🤖 PersonaRAG service initialized`);
      console.log(`🌐 OpenWebUI bridge ready`);
    });
    
  } catch (error) {
    console.error('❌ Failed to start server:', error);
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('\n🛑 Shutting down gracefully...');
  if (personaRAGService) {
    await personaRAGService.cleanup();
  }
  process.exit(0);
});

// Start the server
startServer();
