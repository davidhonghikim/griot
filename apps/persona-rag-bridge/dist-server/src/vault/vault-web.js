#!/usr/bin/env node
"use strict";
/**
 * PersonaRAG Vault Web GUI
 *
 * Web interface for managing secure credentials and configuration
 * Usage: npx ts-node src/vault/vault-web.ts
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const path_1 = __importDefault(require("path"));
const secure_vault_1 = require("./secure-vault");
const app = (0, express_1.default)();
const PORT = process.env.VAULT_WEB_PORT || 3001;
// Middleware
app.use(express_1.default.json());
app.use(express_1.default.urlencoded({ extended: true }));
app.use(express_1.default.static(path_1.default.join(__dirname, 'web')));
// API Routes
app.get('/api/secrets', async (_req, res) => {
    try {
        const vault = (0, secure_vault_1.getVault)();
        const secrets = await vault.listSecrets();
        const secretData = [];
        for (const key of secrets) {
            const value = await vault.getSecret(key);
            secretData.push({
                key,
                value: value || '',
                masked: value ? value.substring(0, 4) + '*'.repeat(Math.max(0, value.length - 8)) + value.substring(value.length - 4) : '',
                hasValue: !!value
            });
        }
        res.json({ success: true, secrets: secretData });
    }
    catch (error) {
        res.status(500).json({ success: false, error: error instanceof Error ? error.message : 'Unknown error' });
    }
});
app.post('/api/secrets', async (req, res) => {
    try {
        const { key, value, encrypted = true } = req.body;
        if (!key || !value) {
            return res.status(400).json({ success: false, error: 'Key and value are required' });
        }
        const vault = (0, secure_vault_1.getVault)();
        await vault.setSecret(key, value, encrypted);
        res.json({ success: true, message: 'Secret saved successfully' });
    }
    catch (error) {
        res.status(500).json({ success: false, error: error instanceof Error ? error.message : 'Unknown error' });
    }
});
app.delete('/api/secrets/:key', async (req, res) => {
    try {
        const { key } = req.params;
        const vault = (0, secure_vault_1.getVault)();
        const removed = await vault.removeSecret(key);
        if (removed) {
            res.json({ success: true, message: 'Secret removed successfully' });
        }
        else {
            res.status(404).json({ success: false, error: 'Secret not found' });
        }
    }
    catch (error) {
        res.status(500).json({ success: false, error: error instanceof Error ? error.message : 'Unknown error' });
    }
});
app.post('/api/import', async (req, res) => {
    try {
        const { envContent } = req.body;
        if (!envContent) {
            return res.status(400).json({ success: false, error: 'Environment content is required' });
        }
        const vault = (0, secure_vault_1.getVault)();
        const lines = envContent.split('\n').filter((line) => line.trim() && !line.startsWith('#') && line.includes('='));
        let imported = 0;
        for (const line of lines) {
            const [key, ...valueParts] = line.split('=');
            const value = valueParts.join('=');
            if (!key || !value)
                continue;
            const trimmedKey = key.trim();
            const trimmedValue = value.trim();
            await vault.setSecret(trimmedKey, trimmedValue);
            imported++;
        }
        res.json({ success: true, message: `Imported ${imported} secrets` });
    }
    catch (error) {
        res.status(500).json({ success: false, error: error instanceof Error ? error.message : 'Unknown error' });
    }
});
app.get('/api/export', async (_req, res) => {
    try {
        const vault = (0, secure_vault_1.getVault)();
        const secrets = await vault.listSecrets();
        let envContent = '# PersonaRAG Bridge Environment Configuration\n';
        envContent += '# Generated by vault web interface\n\n';
        for (const secretKey of secrets) {
            const value = await vault.getSecret(secretKey);
            if (value) {
                envContent += `${secretKey}=${value}\n`;
            }
        }
        res.setHeader('Content-Type', 'text/plain');
        res.setHeader('Content-Disposition', 'attachment; filename="persona-rag.env"');
        res.send(envContent);
    }
    catch (error) {
        res.status(500).json({ success: false, error: error instanceof Error ? error.message : 'Unknown error' });
    }
});
app.get('/api/status', async (_req, res) => {
    try {
        const vault = (0, secure_vault_1.getVault)();
        const secrets = await vault.listSecrets();
        const validation = await vault.validateSecurity();
        const status = vault.getStatus();
        res.json({
            success: true,
            status: {
                initialized: status.initialized,
                secretCount: secrets.length,
                vaultPath: status.vaultPath,
                securityValid: validation.valid,
                issues: validation.issues
            }
        });
    }
    catch (error) {
        res.status(500).json({ success: false, error: error instanceof Error ? error.message : 'Unknown error' });
    }
});
// Serve the web interface
app.get('/', async (_req, res) => {
    try {
        const html = await generateHTML();
        res.send(html);
    }
    catch (error) {
        res.status(500).send('Failed to generate web interface');
    }
});
async function generateHTML() {
    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PersonaRAG Vault Manager</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        .header p {
            opacity: 0.9;
            font-size: 1.1em;
        }
        .content {
            padding: 30px;
        }
        .tabs {
            display: flex;
            border-bottom: 2px solid #eee;
            margin-bottom: 30px;
        }
        .tab {
            padding: 15px 30px;
            cursor: pointer;
            border-bottom: 3px solid transparent;
            transition: all 0.3s;
        }
        .tab.active {
            border-bottom-color: #667eea;
            color: #667eea;
            font-weight: bold;
        }
        .tab:hover {
            background: #f8f9fa;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }
        input, textarea, select {
            width: 100%;
            padding: 12px;
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s;
        }
        input:focus, textarea:focus, select:focus {
            outline: none;
            border-color: #667eea;
        }
        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: transform 0.2s;
        }
        .btn:hover {
            transform: translateY(-2px);
        }
        .btn-secondary {
            background: #6c757d;
        }
        .btn-danger {
            background: #dc3545;
        }
        .secrets-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        .secret-card {
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            padding: 20px;
            transition: all 0.3s;
        }
        .secret-card:hover {
            border-color: #667eea;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .secret-key {
            font-weight: bold;
            color: #333;
            margin-bottom: 10px;
        }
        .secret-value {
            font-family: monospace;
            background: #f8f9fa;
            padding: 8px;
            border-radius: 4px;
            margin-bottom: 10px;
            word-break: break-all;
        }
        .secret-actions {
            display: flex;
            gap: 10px;
        }
        .status-bar {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .status-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #28a745;
        }
        .status-indicator.warning {
            background: #ffc107;
        }
        .status-indicator.error {
            background: #dc3545;
        }
        .alert {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        .alert-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .alert-error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🔐 PersonaRAG Vault Manager</h1>
            <p>Secure credential management for your AI bridge</p>
        </div>
        
        <div class="content">
            <div class="status-bar">
                <div class="status-item">
                    <div class="status-indicator" id="vaultStatus"></div>
                    <span id="vaultStatusText">Loading...</span>
                </div>
                <div class="status-item">
                    <span id="secretCount">0 secrets</span>
                </div>
            </div>
            
            <div id="alert" class="alert hidden"></div>
            
            <div class="tabs">
                <div class="tab active" onclick="showTab('secrets')">Secrets</div>
                <div class="tab" onclick="showTab('add')">Add Secret</div>
                <div class="tab" onclick="showTab('import')">Import/Export</div>
            </div>
            
            <div id="secrets-tab" class="tab-content active">
                <div class="secrets-grid" id="secretsGrid">
                    <p>Loading secrets...</p>
                </div>
            </div>
            
            <div id="add-tab" class="tab-content">
                <form id="addSecretForm">
                    <div class="form-group">
                        <label for="secretKey">Secret Key:</label>
                        <input type="text" id="secretKey" placeholder="e.g., OPENWEBUI_API_KEY" required>
                    </div>
                    <div class="form-group">
                        <label for="secretValue">Secret Value:</label>
                        <input type="password" id="secretValue" placeholder="Enter your secret value" required>
                    </div>
                    <div class="form-group">
                        <label>
                            <input type="checkbox" id="encrypted" checked>
                            Encrypt this secret (recommended)
                        </label>
                    </div>
                    <button type="submit" class="btn">Add Secret</button>
                </form>
            </div>
            
            <div id="import-tab" class="tab-content">
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 30px;">
                    <div>
                        <h3>Import from .env file</h3>
                        <div class="form-group">
                            <label for="envContent">Paste your .env file content:</label>
                            <textarea id="envContent" rows="15" placeholder="# Paste your .env file content here&#10;OPENWEBUI_API_KEY=your_key_here&#10;OPENAI_API_KEY=your_openai_key_here"></textarea>
                        </div>
                        <button onclick="importEnv()" class="btn">Import Secrets</button>
                    </div>
                    <div>
                        <h3>Export to .env file</h3>
                        <p>Download all secrets as a .env file:</p>
                        <button onclick="exportEnv()" class="btn btn-secondary">Download .env</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentTab = 'secrets';
        
        function showTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Show selected tab
            document.getElementById(tabName + '-tab').classList.add('active');
            event.target.classList.add('active');
            currentTab = tabName;
        }
        
        function showAlert(message, type = 'success') {
            const alert = document.getElementById('alert');
            alert.textContent = message;
            alert.className = \`alert alert-\${type}\`;
            alert.classList.remove('hidden');
            
            setTimeout(() => {
                alert.classList.add('hidden');
            }, 5000);
        }
        
        async function loadSecrets() {
            try {
                const response = await fetch('/api/secrets');
                const data = await response.json();
                
                if (data.success) {
                    displaySecrets(data.secrets);
                } else {
                    showAlert('Failed to load secrets: ' + data.error, 'error');
                }
            } catch (error) {
                showAlert('Failed to load secrets: ' + error.message, 'error');
            }
        }
        
        function displaySecrets(secrets) {
            const grid = document.getElementById('secretsGrid');
            
            if (secrets.length === 0) {
                grid.innerHTML = '<p>No secrets found. Add your first secret!</p>';
                return;
            }
            
            grid.innerHTML = secrets.map(secret => \`
                <div class="secret-card">
                    <div class="secret-key">\${secret.key}</div>
                    <div class="secret-value">\${secret.masked}</div>
                    <div class="secret-actions">
                        <button onclick="editSecret('\${secret.key}')" class="btn btn-secondary">Edit</button>
                        <button onclick="deleteSecret('\${secret.key}')" class="btn btn-danger">Delete</button>
                    </div>
                </div>
            \`).join('');
        }
        
        async function addSecret(event) {
            event.preventDefault();
            
            const key = document.getElementById('secretKey').value;
            const value = document.getElementById('secretValue').value;
            const encrypted = document.getElementById('encrypted').checked;
            
            try {
                const response = await fetch('/api/secrets', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ key, value, encrypted })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showAlert('Secret added successfully!');
                    document.getElementById('addSecretForm').reset();
                    loadSecrets();
                    loadStatus();
                } else {
                    showAlert('Failed to add secret: ' + data.error, 'error');
                }
            } catch (error) {
                showAlert('Failed to add secret: ' + error.message, 'error');
            }
        }
        
        async function deleteSecret(key) {
            if (!confirm(\`Are you sure you want to delete "\${key}"?\`)) {
                return;
            }
            
            try {
                const response = await fetch(\`/api/secrets/\${key}\`, {
                    method: 'DELETE'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showAlert('Secret deleted successfully!');
                    loadSecrets();
                    loadStatus();
                } else {
                    showAlert('Failed to delete secret: ' + data.error, 'error');
                }
            } catch (error) {
                showAlert('Failed to delete secret: ' + error.message, 'error');
            }
        }
        
        async function importEnv() {
            const content = document.getElementById('envContent').value;
            
            if (!content.trim()) {
                showAlert('Please enter .env content', 'error');
                return;
            }
            
            try {
                const response = await fetch('/api/import', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ envContent: content })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showAlert(data.message);
                    document.getElementById('envContent').value = '';
                    loadSecrets();
                    loadStatus();
                } else {
                    showAlert('Failed to import: ' + data.error, 'error');
                }
            } catch (error) {
                showAlert('Failed to import: ' + error.message, 'error');
            }
        }
        
        function exportEnv() {
            window.open('/api/export', '_blank');
        }
        
        async function loadStatus() {
            try {
                const response = await fetch('/api/status');
                const data = await response.json();
                
                if (data.success) {
                    const status = data.status;
                    const statusIndicator = document.getElementById('vaultStatus');
                    const statusText = document.getElementById('vaultStatusText');
                    const secretCount = document.getElementById('secretCount');
                    
                    statusIndicator.className = 'status-indicator';
                    if (status.securityValid) {
                        statusIndicator.classList.add('success');
                        statusText.textContent = 'Vault Secure';
                    } else {
                        statusIndicator.classList.add('warning');
                        statusText.textContent = 'Security Issues';
                    }
                    
                    secretCount.textContent = \`\${status.secretCount} secrets\`;
                }
            } catch (error) {
                console.error('Failed to load status:', error);
            }
        }
        
        // Event listeners
        document.getElementById('addSecretForm').addEventListener('submit', addSecret);
        
        // Load data on page load
        loadSecrets();
        loadStatus();
    </script>
</body>
</html>
  `;
}
// Start the server
app.listen(PORT, () => {
    console.log(`🔐 Vault Web GUI running on http://localhost:${PORT}`);
    console.log(`📋 Use this interface to manage your PersonaRAG secrets`);
    console.log(`🚀 Press Ctrl+C to stop the server`);
});
