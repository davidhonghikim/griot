metadata:
  original_file: 03_Musa_KLF_API.md
  conversion_date: '2025-06-30T11:00:00Z'
  format: yaml
frontmatter:
  title: 'Musa Class: KLF Message API'
  description: KLF Message API specification for the Musa Node Class's security primitives.
sections:
- level: 1
  title: Musa Class KLF Message API
  type: section
  content: The Musa Class API provides generic, primitive-based KLF messages for security
    operations. Other services compose these primitives into higher-level authentication
    and authorization flows.
- level: 3
  title: 1. Authentication
  type: section
  content: ''
- level: 4
  title: '**Request: `validate_credential`**'
  type: section
  content: "-   **Description**: Validates a given credential and, if successful,\
    \ returns a signed Principal object.\n-   **Message Type**: `TASK_REQUEST`\n-\
    \   **Payload**:\n    ```json\n    {\n      \"task_name\": \"validate_credential\"\
    ,\n      \"params\": {\n        \"credential\": {\n          \"type\": \"w3c_vc\
    \ | api_key | oidc_id_token\",\n          \"value\": \"...\"\n        }\n    \
    \  }\n    }\n    ```\n-   **Response (Success)**: `TASK_RESPONSE` with `status:\
    \ \"completed\"` and `result: { ...Principal object... }`.\n-   **Response (Error)**:\
    \ `TASK_RESPONSE` with `status: \"failed\"` and `error: { \"code\": \"INVALID_CREDENTIAL\"\
    , ... }`."
- level: 3
  title: 2. Authorization
  type: section
  content: ''
- level: 4
  title: '**Request: `check_permission`**'
  type: section
  content: "-   **Description**: Checks if a principal is allowed to perform an action\
    \ on a resource.\n-   **Message Type**: `DATA_QUERY`\n-   **Payload**:\n    ```json\n\
    \    {\n      \"query_name\": \"check_permission\",\n      \"params\": {\n   \
    \     \"principal\": { ...Principal object... },\n        \"action\": \"string\
    \ (e.g., 'read', 'write')\",\n        \"resource\": \"string (did of the resource)\"\
    \n      }\n    }\n    ```\n-   **Response (Success)**: `DATA_RESULT` with `result:\
    \ { \"allowed\": true | false }`."
- level: 3
  title: 3. Cryptography
  type: section
  content: ''
- level: 4
  title: '**Request: `encrypt_payload`**'
  type: section
  content: "-   **Description**: Encrypts a payload for a specific recipient DID.\n\
    -   **Message Type**: `TASK_REQUEST`\n-   **Payload**:\n    ```json\n    {\n \
    \       \"task_name\": \"encrypt_payload\",\n        \"params\": {\n         \
    \   \"recipient_did\": \"did:kos:...\",\n            \"plaintext_payload\": {\
    \ ... }\n        }\n    }\n    ```\n-   **Response (Success)**: `TASK_RESPONSE`\
    \ with `status: \"completed\"` and `result: { \"ciphertext\": \"...\" }`."
- level: 4
  title: '**Request: `decrypt_payload`**'
  type: section
  content: "-   **Description**: Decrypts a payload using the node's private key.\n\
    -   **Message Type**: `TASK_REQUEST`\n-   **Payload**:\n    ```json\n    {\n \
    \       \"task_name\": \"decrypt_payload\",\n        \"params\": {\n         \
    \   \"ciphertext\": \"...\"\n        }\n    }\n    ```\n-   **Response (Success)**:\
    \ `TASK_RESPONSE` with `status: \"completed\"` and `result: { \"plaintext_payload\"\
    : { ... } }`."
