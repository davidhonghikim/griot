name: "Media Processing Budget"
description: "Intelligent media processing with budget-aware cost optimization for images, video, and audio"
category: "ai"
tags:
  primary: "ai"
  secondary: ["media", "processing", "budget", "optimization", "images", "video", "audio"]
  priority: "high"
  complexity: "high"
  dependencies: ["token_price_estimator", "budget_manager"]
  version: "1.0.0"
  created: "2025-06-28"
  updated: "2025-06-28"
  author: "system"
code: |
  import { TokenPriceEstimator } from '../../skills/ai/token_price_estimator';
  import { BudgetManager } from '../../skills/ai/budget_manager';
  
  export interface MediaProcessingJob {
    id: string;
    type: 'image' | 'video' | 'audio';
    input: {
      file: string;
      size: number;
      duration?: number;
      resolution?: string;
      quality?: 'low' | 'medium' | 'high';
    };
    processing: {
      operations: string[];
      model: string;
      quality: 'low' | 'medium' | 'high';
      priority: 'low' | 'medium' | 'high';
    };
    budget: {
      budgetId: string;
      maxCost: number;
      estimatedCost: number;
    };
    status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';
    result?: any;
    actualCost?: number;
    createdAt: string;
    completedAt?: string;
  }
  
  export interface MediaProcessingPlan {
    jobs: MediaProcessingJob[];
    totalEstimatedCost: number;
    totalBudget: number;
    remainingBudget: number;
    optimizationLevel: 'aggressive' | 'moderate' | 'minimal';
    recommendations: string[];
  }
  
  export interface MediaProcessingResult {
    jobId: string;
    success: boolean;
    result: any;
    cost: number;
    processingTime: number;
    quality: 'low' | 'medium' | 'high';
    recommendations: string[];
  }
  
  export class MediaProcessingBudget {
    private tokenEstimator: TokenPriceEstimator;
    private budgetManager: BudgetManager;
    private jobs: Map<string, MediaProcessingJob>;
    
    constructor(tokenEstimator: TokenPriceEstimator, budgetManager: BudgetManager) {
      this.tokenEstimator = tokenEstimator;
      this.budgetManager = budgetManager;
      this.jobs = new Map();
    }
    
    // Create a media processing plan
    createProcessingPlan(
      mediaFiles: Array<{
        file: string;
        type: 'image' | 'video' | 'audio';
        size: number;
        duration?: number;
        resolution?: string;
        quality?: 'low' | 'medium' | 'high';
        operations: string[];
        priority: 'low' | 'medium' | 'high';
      }>,
      budgetId: string,
      optimizationLevel: 'aggressive' | 'moderate' | 'minimal' = 'moderate'
    ): MediaProcessingPlan {
      const budgetStatus = this.budgetManager.getBudgetStatus(budgetId);
      if (!budgetStatus) {
        throw new Error('Budget not found or inactive');
      }
      
      const jobs: MediaProcessingJob[] = [];
      let totalEstimatedCost = 0;
      
      // Create jobs with optimized settings
      for (const mediaFile of mediaFiles) {
        const optimizedSettings = this.optimizeProcessingSettings(
          mediaFile,
          budgetStatus.remaining - totalEstimatedCost,
          optimizationLevel
        );
        
        const mediaConfig = {
          type: mediaFile.type,
          size: mediaFile.size,
          duration: mediaFile.duration,
          resolution: optimizedSettings.resolution || mediaFile.resolution,
          quality: optimizedSettings.quality,
        };
        
        const estimation = this.tokenEstimator.estimateMixedMedia([mediaConfig]);
        const estimatedCost = estimation.estimatedCost;
        
        // Check if we can afford this job
        if (totalEstimatedCost + estimatedCost > budgetStatus.remaining) {
          if (optimizationLevel === 'aggressive') {
            // Try with more aggressive optimization
            const aggressiveSettings = this.optimizeProcessingSettings(
              mediaFile,
              budgetStatus.remaining - totalEstimatedCost,
              'aggressive'
            );
            
            const aggressiveConfig = {
              ...mediaConfig,
              resolution: aggressiveSettings.resolution,
              quality: aggressiveSettings.quality,
            };
            
            const aggressiveEstimation = this.tokenEstimator.estimateMixedMedia([aggressiveConfig]);
            if (totalEstimatedCost + aggressiveEstimation.estimatedCost <= budgetStatus.remaining) {
              mediaConfig.resolution = aggressiveSettings.resolution;
              mediaConfig.quality = aggressiveSettings.quality;
              estimatedCost = aggressiveEstimation.estimatedCost;
            } else {
              continue; // Skip this job if we can't afford it even with aggressive optimization
            }
          } else {
            continue; // Skip this job if we can't afford it
          }
        }
        
        const job: MediaProcessingJob = {
          id: `job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          type: mediaFile.type,
          input: {
            file: mediaFile.file,
            size: mediaFile.size,
            duration: mediaFile.duration,
            resolution: mediaFile.resolution,
            quality: mediaFile.quality,
          },
          processing: {
            operations: mediaFile.operations,
            model: this.selectOptimalModel(mediaFile.type, estimatedCost, optimizationLevel),
            quality: mediaConfig.quality,
            priority: mediaFile.priority,
          },
          budget: {
            budgetId,
            maxCost: estimatedCost * 1.2, // Allow 20% buffer
            estimatedCost,
          },
          status: 'pending',
          createdAt: new Date().toISOString(),
        };
        
        jobs.push(job);
        totalEstimatedCost += estimatedCost;
      }
      
      // Sort jobs by priority and cost
      jobs.sort((a, b) => {
        const priorityOrder = { high: 3, medium: 2, low: 1 };
        const aPriority = priorityOrder[a.processing.priority];
        const bPriority = priorityOrder[b.processing.priority];
        
        if (aPriority !== bPriority) return bPriority - aPriority;
        return a.budget.estimatedCost - b.budget.estimatedCost;
      });
      
      const recommendations = this.generatePlanRecommendations(jobs, budgetStatus, optimizationLevel);
      
      return {
        jobs,
        totalEstimatedCost,
        totalBudget: budgetStatus.limit,
        remainingBudget: budgetStatus.remaining - totalEstimatedCost,
        optimizationLevel,
        recommendations,
      };
    }
    
    // Process a single media job
    async processJob(jobId: string): Promise<MediaProcessingResult> {
      const job = this.jobs.get(jobId);
      if (!job) {
        throw new Error('Job not found');
      }
      
      if (job.status !== 'pending') {
        throw new Error(`Job is not in pending status: ${job.status}`);
      }
      
      // Check budget before processing
      const budgetCheck = this.budgetManager.canAffordOperation(
        job.budget.budgetId,
        job.budget.estimatedCost
      );
      
      if (!budgetCheck.canAfford) {
        job.status = 'cancelled';
        throw new Error(`Insufficient budget for job ${jobId}`);
      }
      
      job.status = 'processing';
      const startTime = Date.now();
      
      try {
        // Simulate processing (replace with actual media processing)
        const result = await this.simulateMediaProcessing(job);
        
        // Calculate actual cost
        const actualCost = await this.calculateActualProcessingCost(job, result);
        
        // Record spending
        this.budgetManager.recordSpending({
          operation: `media_processing_${job.type}`,
          mediaType: job.type,
          model: job.processing.model,
          tokens: 0, // Media processing doesn't use tokens
          cost: actualCost,
          currency: 'USD',
          budgetId: job.budget.budgetId,
        });
        
        // Update job
        job.status = 'completed';
        job.result = result;
        job.actualCost = actualCost;
        job.completedAt = new Date().toISOString();
        
        const processingTime = Date.now() - startTime;
        const recommendations = this.generateJobRecommendations(job, actualCost);
        
        return {
          jobId,
          success: true,
          result,
          cost: actualCost,
          processingTime,
          quality: job.processing.quality,
          recommendations,
        };
        
      } catch (error) {
        job.status = 'failed';
        throw error;
      }
    }
    
    // Process multiple jobs in parallel
    async processJobs(jobIds: string[], maxConcurrent: number = 3): Promise<MediaProcessingResult[]> {
      const results: MediaProcessingResult[] = [];
      const activeJobs = new Set<string>();
      
      for (const jobId of jobIds) {
        // Wait if we've reached max concurrent jobs
        while (activeJobs.size >= maxConcurrent) {
          await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        activeJobs.add(jobId);
        
        // Process job
        this.processJob(jobId)
          .then(result => {
            results.push(result);
            activeJobs.delete(jobId);
          })
          .catch(error => {
            console.error(`Job ${jobId} failed:`, error);
            activeJobs.delete(jobId);
          });
      }
      
      // Wait for all jobs to complete
      while (activeJobs.size > 0) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      
      return results;
    }
    
    // Get job status
    getJobStatus(jobId: string): MediaProcessingJob | null {
      return this.jobs.get(jobId) || null;
    }
    
    // Cancel a job
    cancelJob(jobId: string): boolean {
      const job = this.jobs.get(jobId);
      if (!job || job.status !== 'pending') return false;
      
      job.status = 'cancelled';
      return true;
    }
    
    // Get processing analytics
    getProcessingAnalytics(budgetId: string): {
      totalJobs: number;
      completedJobs: number;
      failedJobs: number;
      totalCost: number;
      averageCostPerJob: number;
      costBreakdown: Record<string, number>;
      efficiencyScore: number;
    } {
      const jobs = Array.from(this.jobs.values()).filter(job => job.budget.budgetId === budgetId);
      
      const totalJobs = jobs.length;
      const completedJobs = jobs.filter(job => job.status === 'completed').length;
      const failedJobs = jobs.filter(job => job.status === 'failed').length;
      
      const completedJobCosts = jobs
        .filter(job => job.status === 'completed' && job.actualCost)
        .map(job => job.actualCost!);
      
      const totalCost = completedJobCosts.reduce((sum, cost) => sum + cost, 0);
      const averageCostPerJob = completedJobCosts.length > 0 ? totalCost / completedJobCosts.length : 0;
      
      const costBreakdown = jobs.reduce((acc, job) => {
        if (job.actualCost) {
          acc[job.type] = (acc[job.type] || 0) + job.actualCost;
        }
        return acc;
      }, {} as Record<string, number>);
      
      const efficiencyScore = this.calculateProcessingEfficiency(jobs);
      
      return {
        totalJobs,
        completedJobs,
        failedJobs,
        totalCost,
        averageCostPerJob,
        costBreakdown,
        efficiencyScore,
      };
    }
    
    // Helper methods
    private optimizeProcessingSettings(
      mediaFile: any,
      remainingBudget: number,
      optimizationLevel: string
    ): { resolution?: string; quality: 'low' | 'medium' | 'high' } {
      const settings = {
        resolution: mediaFile.resolution,
        quality: mediaFile.quality || 'medium',
      };
      
      if (optimizationLevel === 'aggressive') {
        // Aggressive optimization
        if (mediaFile.type === 'image') {
          settings.resolution = '512x512';
          settings.quality = 'low';
        } else if (mediaFile.type === 'video') {
          settings.resolution = '480p';
          settings.quality = 'low';
        } else if (mediaFile.type === 'audio') {
          settings.quality = 'low';
        }
      } else if (optimizationLevel === 'moderate') {
        // Moderate optimization
        if (mediaFile.type === 'image' && settings.resolution?.includes('4k')) {
          settings.resolution = '1024x1024';
        } else if (mediaFile.type === 'video' && settings.resolution === '4k') {
          settings.resolution = '1080p';
        }
      }
      
      return settings;
    }
    
    private selectOptimalModel(
      mediaType: string,
      estimatedCost: number,
      optimizationLevel: string
    ): string {
      if (optimizationLevel === 'aggressive') {
        return 'gpt-3.5-turbo'; // Cheapest option
      } else if (estimatedCost > 0.10) {
        return 'gpt-3.5-turbo'; // Use cheaper model for expensive operations
      } else {
        return 'gpt-4'; // Use best model for affordable operations
      }
    }
    
    private generatePlanRecommendations(
      jobs: MediaProcessingJob[],
      budgetStatus: any,
      optimizationLevel: string
    ): string[] {
      const recommendations: string[] = [];
      
      if (jobs.length === 0) {
        recommendations.push('No jobs can be processed within budget - consider increasing budget or reducing quality');
        return recommendations;
      }
      
      const totalCost = jobs.reduce((sum, job) => sum + job.budget.estimatedCost, 0);
      
      if (totalCost > budgetStatus.remaining * 0.8) {
        recommendations.push('Budget usage is high - monitor processing costs closely');
      }
      
      const expensiveJobs = jobs.filter(job => job.budget.estimatedCost > 0.05);
      if (expensiveJobs.length > 0) {
        recommendations.push('Some jobs are expensive - consider processing during off-peak hours');
      }
      
      if (optimizationLevel === 'minimal') {
        recommendations.push('Using minimal optimization - consider moderate optimization for cost savings');
      }
      
      return recommendations;
    }
    
    private async simulateMediaProcessing(job: MediaProcessingJob): Promise<any> {
      // Simulate processing time based on media type and size
      const processingTime = this.estimateProcessingTime(job);
      await new Promise(resolve => setTimeout(resolve, processingTime));
      
      return {
        processedFile: `processed_${job.input.file}`,
        metadata: {
          originalSize: job.input.size,
          processedSize: job.input.size * 0.8, // Simulate compression
          quality: job.processing.quality,
        },
      };
    }
    
    private estimateProcessingTime(job: MediaProcessingJob): number {
      let baseTime = 1000; // 1 second base
      
      if (job.type === 'image') {
        baseTime *= job.input.size / (1024 * 1024); // Scale with file size
      } else if (job.type === 'video') {
        baseTime *= (job.input.duration || 60) / 60; // Scale with duration
      } else if (job.type === 'audio') {
        baseTime *= (job.input.duration || 60) / 60; // Scale with duration
      }
      
      return Math.min(baseTime, 10000); // Cap at 10 seconds
    }
    
    private async calculateActualProcessingCost(job: MediaProcessingJob, result: any): Promise<number> {
      // Calculate actual cost based on processing time and quality
      const processingTime = this.estimateProcessingTime(job);
      const timeMultiplier = processingTime / 1000; // Cost per second
      const qualityMultiplier = { low: 0.8, medium: 1.0, high: 1.3 }[job.processing.quality];
      
      return job.budget.estimatedCost * timeMultiplier * qualityMultiplier;
    }
    
    private generateJobRecommendations(job: MediaProcessingJob, actualCost: number): string[] {
      const recommendations: string[] = [];
      
      if (actualCost > job.budget.estimatedCost * 1.2) {
        recommendations.push('Actual cost exceeded estimate - consider lower quality settings');
      }
      
      if (job.processing.quality === 'high' && actualCost > 0.10) {
        recommendations.push('High quality processing is expensive - consider medium quality for routine tasks');
      }
      
      if (job.type === 'video' && job.input.duration && job.input.duration > 300) {
        recommendations.push('Long video detected - consider processing in segments');
      }
      
      return recommendations;
    }
    
    private calculateProcessingEfficiency(jobs: MediaProcessingJob[]): number {
      let score = 100;
      
      const completedJobs = jobs.filter(job => job.status === 'completed');
      if (completedJobs.length === 0) return 0;
      
      // Penalize jobs that exceed estimated cost
      const costOverruns = completedJobs.filter(job => 
        job.actualCost && job.actualCost > job.budget.estimatedCost * 1.1
      );
      score -= (costOverruns.length / completedJobs.length) * 20;
      
      // Penalize failed jobs
      const failedJobs = jobs.filter(job => job.status === 'failed');
      score -= (failedJobs.length / jobs.length) * 30;
      
      // Penalize expensive jobs
      const expensiveJobs = completedJobs.filter(job => 
        job.actualCost && job.actualCost > 0.10
      );
      score -= (expensiveJobs.length / completedJobs.length) * 15;
      
      return Math.max(0, score);
    }
  } 