name: "Message Routing Base"
description: "Intelligent message routing and communication orchestration for multi-channel communication"
category: "communication"
tags:
  primary: "communication"
  secondary: ["routing", "orchestration", "channels", "messaging", "protocols"]
  priority: "high"
  complexity: "moderate"
  dependencies: []
  version: "1.0.0"
  created: "2025-06-28"
  updated: "2025-06-28"
  author: "system"
  type: "base"
code: |
  export interface MessageRoute {
    id: string;
    name: string;
    description: string;
    sourceChannel: string;
    targetChannels: string[];
    conditions: RouteCondition[];
    priority: number;
    enabled: boolean;
  }
  
  export interface RouteCondition {
    field: string;
    operator: 'equals' | 'contains' | 'regex' | 'range' | 'exists';
    value: any;
    logicalOperator?: 'and' | 'or';
  }
  
  export interface Message {
    id: string;
    content: string;
    type: 'text' | 'image' | 'video' | 'audio' | 'data' | 'command';
    source: string;
    destination: string;
    priority: 'low' | 'medium' | 'high' | 'urgent';
    metadata: Record<string, any>;
    timestamp: Date;
    ttl?: number; // Time to live in seconds
  }
  
  export interface RoutingResult {
    messageId: string;
    routes: string[];
    decisions: RoutingDecision[];
    performance: {
      routingTime: number;
      routeCount: number;
      successRate: number;
    };
  }
  
  export interface RoutingDecision {
    routeId: string;
    matched: boolean;
    reason: string;
    confidence: number;
    targetChannel: string;
  }
  
  export interface ChannelConfig {
    id: string;
    name: string;
    type: 'http' | 'websocket' | 'grpc' | 'mqtt' | 'redis' | 'kafka' | 'custom';
    endpoint: string;
    credentials?: Record<string, any>;
    options: Record<string, any>;
    healthCheck: boolean;
    retryPolicy: RetryPolicy;
  }
  
  export interface RetryPolicy {
    maxRetries: number;
    backoffStrategy: 'linear' | 'exponential' | 'fixed';
    initialDelay: number;
    maxDelay: number;
  }
  
  export class MessageRoutingSkill {
    private routes: Map<string, MessageRoute>;
    private channels: Map<string, ChannelConfig>;
    private routingCache: Map<string, RoutingResult>;
    private performanceMetrics: {
      totalMessages: number;
      successfulRoutes: number;
      failedRoutes: number;
      averageRoutingTime: number;
    };
    
    constructor() {
      this.routes = new Map();
      this.channels = new Map();
      this.routingCache = new Map();
      this.performanceMetrics = {
        totalMessages: 0,
        successfulRoutes: 0,
        failedRoutes: 0,
        averageRoutingTime: 0
      };
      this.initializeDefaultRoutes();
      this.initializeDefaultChannels();
    }
    
    // Initialize default routes
    private initializeDefaultRoutes(): void {
      // High priority route
      this.routes.set('urgent_route', {
        id: 'urgent_route',
        name: 'Urgent Message Route',
        description: 'Route urgent messages to all available channels',
        sourceChannel: '*',
        targetChannels: ['notification', 'email', 'sms'],
        conditions: [
          {
            field: 'priority',
            operator: 'equals',
            value: 'urgent'
          }
        ],
        priority: 1,
        enabled: true
      });
      
      // Data route
      this.routes.set('data_route', {
        id: 'data_route',
        name: 'Data Message Route',
        description: 'Route data messages to storage and processing channels',
        sourceChannel: '*',
        targetChannels: ['database', 'analytics', 'backup'],
        conditions: [
          {
            field: 'type',
            operator: 'equals',
            value: 'data'
          }
        ],
        priority: 2,
        enabled: true
      });
      
      // Command route
      this.routes.set('command_route', {
        id: 'command_route',
        name: 'Command Message Route',
        description: 'Route command messages to execution channels',
        sourceChannel: '*',
        targetChannels: ['executor', 'controller', 'monitor'],
        conditions: [
          {
            field: 'type',
            operator: 'equals',
            value: 'command'
          }
        ],
        priority: 3,
        enabled: true
      });
      
      // Content route
      this.routes.set('content_route', {
        id: 'content_route',
        name: 'Content Message Route',
        description: 'Route content messages to display and distribution channels',
        sourceChannel: '*',
        targetChannels: ['display', 'social', 'archive'],
        conditions: [
          {
            field: 'type',
            operator: 'in',
            value: ['text', 'image', 'video', 'audio']
          }
        ],
        priority: 4,
        enabled: true
      });
    }
    
    // Initialize default channels
    private initializeDefaultChannels(): void {
      // HTTP channel
      this.channels.set('http', {
        id: 'http',
        name: 'HTTP Channel',
        type: 'http',
        endpoint: 'http://localhost:3000/api/messages',
        options: {
          timeout: 5000,
          headers: {
            'Content-Type': 'application/json'
          }
        },
        healthCheck: true,
        retryPolicy: {
          maxRetries: 3,
          backoffStrategy: 'exponential',
          initialDelay: 1000,
          maxDelay: 10000
        }
      });
      
      // WebSocket channel
      this.channels.set('websocket', {
        id: 'websocket',
        name: 'WebSocket Channel',
        type: 'websocket',
        endpoint: 'ws://localhost:8080/ws',
        options: {
          reconnect: true,
          heartbeat: 30000
        },
        healthCheck: true,
        retryPolicy: {
          maxRetries: 5,
          backoffStrategy: 'exponential',
          initialDelay: 2000,
          maxDelay: 30000
        }
      });
      
      // Database channel
      this.channels.set('database', {
        id: 'database',
        name: 'Database Channel',
        type: 'custom',
        endpoint: 'mongodb://localhost:27017/messages',
        options: {
          collection: 'messages',
          batchSize: 100
        },
        healthCheck: true,
        retryPolicy: {
          maxRetries: 3,
          backoffStrategy: 'linear',
          initialDelay: 500,
          maxDelay: 5000
        }
      });
      
      // Notification channel
      this.channels.set('notification', {
        id: 'notification',
        name: 'Notification Channel',
        type: 'http',
        endpoint: 'http://localhost:4000/notifications',
        options: {
          timeout: 3000,
          headers: {
            'Authorization': 'Bearer ${token}'
          }
        },
        healthCheck: true,
        retryPolicy: {
          maxRetries: 2,
          backoffStrategy: 'fixed',
          initialDelay: 1000,
          maxDelay: 2000
        }
      });
    }
    
    // Route a message
    routeMessage(message: Message): RoutingResult {
      const startTime = Date.now();
      this.performanceMetrics.totalMessages++;
      
      try {
        // Check cache first
        const cacheKey = this.generateCacheKey(message);
        if (this.routingCache.has(cacheKey)) {
          return this.routingCache.get(cacheKey)!;
        }
        
        // Find matching routes
        const matchingRoutes = this.findMatchingRoutes(message);
        const decisions = this.evaluateRoutes(message, matchingRoutes);
        
        // Determine target channels
        const targetChannels = this.determineTargetChannels(decisions);
        
        // Create routing result
        const routingTime = Date.now() - startTime;
        const result: RoutingResult = {
          messageId: message.id,
          routes: matchingRoutes.map(r => r.id),
          decisions,
          performance: {
            routingTime,
            routeCount: matchingRoutes.length,
            successRate: this.calculateSuccessRate(decisions)
          }
        };
        
        // Cache result
        this.routingCache.set(cacheKey, result);
        
        // Update metrics
        this.updatePerformanceMetrics(routingTime, decisions);
        
        this.performanceMetrics.successfulRoutes++;
        return result;
        
      } catch (error) {
        this.performanceMetrics.failedRoutes++;
        throw new Error(`Message routing failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
      }
    }
    
    // Find routes that match the message
    private findMatchingRoutes(message: Message): MessageRoute[] {
      const matchingRoutes: MessageRoute[] = [];
      
      for (const route of this.routes.values()) {
        if (!route.enabled) continue;
        
        if (this.routeMatchesMessage(route, message)) {
          matchingRoutes.push(route);
        }
      }
      
      // Sort by priority (lower number = higher priority)
      return matchingRoutes.sort((a, b) => a.priority - b.priority);
    }
    
    // Check if a route matches a message
    private routeMatchesMessage(route: MessageRoute, message: Message): boolean {
      // Check source channel
      if (route.sourceChannel !== '*' && route.sourceChannel !== message.source) {
        return false;
      }
      
      // Check conditions
      for (const condition of route.conditions) {
        if (!this.evaluateCondition(condition, message)) {
          return false;
        }
      }
      
      return true;
    }
    
    // Evaluate a single condition
    private evaluateCondition(condition: RouteCondition, message: Message): boolean {
      const fieldValue = this.getNestedValue(message, condition.field);
      
      switch (condition.operator) {
        case 'equals':
          return fieldValue === condition.value;
        case 'contains':
          return typeof fieldValue === 'string' && fieldValue.includes(condition.value);
        case 'regex':
          if (typeof fieldValue === 'string' && typeof condition.value === 'string') {
            try {
              const regex = new RegExp(condition.value);
              return regex.test(fieldValue);
            } catch {
              return false;
            }
          }
          return false;
        case 'range':
          if (typeof fieldValue === 'number' && Array.isArray(condition.value)) {
            const [min, max] = condition.value;
            return fieldValue >= min && fieldValue <= max;
          }
          return false;
        case 'exists':
          return fieldValue !== undefined && fieldValue !== null;
        default:
          return false;
      }
    }
    
    // Evaluate routes and create decisions
    private evaluateRoutes(message: Message, routes: MessageRoute[]): RoutingDecision[] {
      const decisions: RoutingDecision[] = [];
      
      for (const route of routes) {
        const confidence = this.calculateRouteConfidence(route, message);
        const reason = this.generateRouteReason(route, message);
        
        for (const targetChannel of route.targetChannels) {
          decisions.push({
            routeId: route.id,
            matched: true,
            reason,
            confidence,
            targetChannel
          });
        }
      }
      
      return decisions;
    }
    
    // Calculate confidence for a route
    private calculateRouteConfidence(route: MessageRoute, message: Message): number {
      let confidence = 0.5; // Base confidence
      
      // Higher confidence for more specific routes
      if (route.sourceChannel !== '*') {
        confidence += 0.2;
      }
      
      // Higher confidence for routes with more conditions
      if (route.conditions.length > 0) {
        confidence += Math.min(route.conditions.length * 0.1, 0.3);
      }
      
      // Higher confidence for higher priority routes
      confidence += (10 - route.priority) * 0.02;
      
      return Math.min(confidence, 1.0);
    }
    
    // Generate reason for route matching
    private generateRouteReason(route: MessageRoute, message: Message): string {
      const reasons: string[] = [];
      
      if (route.sourceChannel !== '*') {
        reasons.push(`Source channel matches: ${route.sourceChannel}`);
      }
      
      for (const condition of route.conditions) {
        const fieldValue = this.getNestedValue(message, condition.field);
        reasons.push(`${condition.field} ${condition.operator} ${condition.value} (actual: ${fieldValue})`);
      }
      
      return reasons.join(', ');
    }
    
    // Determine target channels from decisions
    private determineTargetChannels(decisions: RoutingDecision[]): string[] {
      const targetChannels = new Set<string>();
      
      for (const decision of decisions) {
        if (decision.matched) {
          targetChannels.add(decision.targetChannel);
        }
      }
      
      return Array.from(targetChannels);
    }
    
    // Calculate success rate
    private calculateSuccessRate(decisions: RoutingDecision[]): number {
      if (decisions.length === 0) return 0;
      
      const successful = decisions.filter(d => d.matched).length;
      return successful / decisions.length;
    }
    
    // Update performance metrics
    private updatePerformanceMetrics(routingTime: number, decisions: RoutingDecision[]): void {
      const totalTime = this.performanceMetrics.averageRoutingTime * (this.performanceMetrics.totalMessages - 1) + routingTime;
      this.performanceMetrics.averageRoutingTime = totalTime / this.performanceMetrics.totalMessages;
    }
    
    // Generate cache key for message
    private generateCacheKey(message: Message): string {
      return `${message.type}_${message.priority}_${message.source}_${message.destination}`;
    }
    
    // Get nested value from object
    private getNestedValue(obj: any, path: string): any {
      return path.split('.').reduce((current, key) => {
        return current && current[key] !== undefined ? current[key] : undefined;
      }, obj);
    }
    
    // Add a new route
    addRoute(route: MessageRoute): void {
      this.routes.set(route.id, route);
    }
    
    // Remove a route
    removeRoute(routeId: string): boolean {
      return this.routes.delete(routeId);
    }
    
    // Update a route
    updateRoute(routeId: string, updates: Partial<MessageRoute>): boolean {
      const route = this.routes.get(routeId);
      if (!route) return false;
      
      this.routes.set(routeId, { ...route, ...updates });
      return true;
    }
    
    // Add a new channel
    addChannel(channel: ChannelConfig): void {
      this.channels.set(channel.id, channel);
    }
    
    // Remove a channel
    removeChannel(channelId: string): boolean {
      return this.channels.delete(channelId);
    }
    
    // Get channel configuration
    getChannel(channelId: string): ChannelConfig | undefined {
      return this.channels.get(channelId);
    }
    
    // Get all routes
    getRoutes(): MessageRoute[] {
      return Array.from(this.routes.values());
    }
    
    // Get all channels
    getChannels(): ChannelConfig[] {
      return Array.from(this.channels.values());
    }
    
    // Get performance metrics
    getPerformanceMetrics(): typeof this.performanceMetrics {
      return { ...this.performanceMetrics };
    }
    
    // Clear routing cache
    clearCache(): void {
      this.routingCache.clear();
    }
    
    // Health check for all channels
    async checkChannelHealth(): Promise<Record<string, boolean>> {
      const healthStatus: Record<string, boolean> = {};
      
      for (const [channelId, channel] of this.channels) {
        if (channel.healthCheck) {
          try {
            healthStatus[channelId] = await this.performHealthCheck(channel);
          } catch {
            healthStatus[channelId] = false;
          }
        } else {
          healthStatus[channelId] = true; // Assume healthy if no health check
        }
      }
      
      return healthStatus;
    }
    
    // Perform health check for a channel
    private async performHealthCheck(channel: ChannelConfig): Promise<boolean> {
      try {
        switch (channel.type) {
          case 'http':
            return await this.checkHttpHealth(channel);
          case 'websocket':
            return await this.checkWebSocketHealth(channel);
          default:
            return true; // Assume healthy for other types
        }
      } catch {
        return false;
      }
    }
    
    // Check HTTP channel health
    private async checkHttpHealth(channel: ChannelConfig): Promise<boolean> {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), channel.options.timeout || 5000);
      
      try {
        const response = await fetch(`${channel.endpoint}/health`, {
          method: 'GET',
          headers: channel.options.headers,
          signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        return response.ok;
      } catch {
        clearTimeout(timeoutId);
        return false;
      }
    }
    
    // Check WebSocket channel health
    private async checkWebSocketHealth(channel: ChannelConfig): Promise<boolean> {
      return new Promise((resolve) => {
        const ws = new WebSocket(channel.endpoint);
        const timeoutId = setTimeout(() => {
          ws.close();
          resolve(false);
        }, channel.options.timeout || 5000);
        
        ws.onopen = () => {
          clearTimeout(timeoutId);
          ws.close();
          resolve(true);
        };
        
        ws.onerror = () => {
          clearTimeout(timeoutId);
          resolve(false);
        };
      });
    }
    
    // Create message from data
    createMessage(
      content: string,
      type: Message['type'],
      source: string,
      destination: string,
      priority: Message['priority'] = 'medium',
      metadata: Record<string, any> = {}
    ): Message {
      return {
        id: this.generateMessageId(),
        content,
        type,
        source,
        destination,
        priority,
        metadata,
        timestamp: new Date()
      };
    }
    
    // Generate unique message ID
    private generateMessageId(): string {
      return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
  } 