name: "File Operations"
description: "Comprehensive file and directory operations including read, write, search, and manipulation"
category: "utils"
tags:
  primary: "utils"
  secondary: ["file", "directory", "io", "search", "manipulation", "fs"]
  priority: "high"
  complexity: "moderate"
  dependencies: []
  version: "1.0.0"
  created: "2025-06-28"
  updated: "2025-06-28"
  author: "system"
code: |
  import * as fs from 'fs/promises';
  import * as path from 'path';
  import { createReadStream, createWriteStream } from 'fs';
  
  export interface FileStats {
    size: number;
    created: Date;
    modified: Date;
    isDirectory: boolean;
    isFile: boolean;
    permissions: string;
  }
  
  export interface SearchOptions {
    recursive?: boolean;
    includeHidden?: boolean;
    fileTypes?: string[];
    maxDepth?: number;
    pattern?: RegExp;
  }
  
  export interface FileOperation {
    operation: 'read' | 'write' | 'delete' | 'move' | 'copy';
    path: string;
    success: boolean;
    error?: string;
    metadata?: any;
  }
  
  export class FileOperations {
    private basePath: string;
    
    constructor(basePath: string = process.cwd()) {
      this.basePath = basePath;
    }
    
    // Basic file operations
    async readFile(filePath: string, encoding: BufferEncoding = 'utf8'): Promise<string> {
      const fullPath = path.resolve(this.basePath, filePath);
      return await fs.readFile(fullPath, encoding);
    }
    
    async readFileBuffer(filePath: string): Promise<Buffer> {
      const fullPath = path.resolve(this.basePath, filePath);
      return await fs.readFile(fullPath);
    }
    
    async writeFile(filePath: string, content: string | Buffer): Promise<void> {
      const fullPath = path.resolve(this.basePath, filePath);
      await fs.mkdir(path.dirname(fullPath), { recursive: true });
      await fs.writeFile(fullPath, content);
    }
    
    async appendFile(filePath: string, content: string): Promise<void> {
      const fullPath = path.resolve(this.basePath, filePath);
      await fs.appendFile(fullPath, content);
    }
    
    async deleteFile(filePath: string): Promise<void> {
      const fullPath = path.resolve(this.basePath, filePath);
      await fs.unlink(fullPath);
    }
    
    // Directory operations
    async createDirectory(dirPath: string, recursive: boolean = true): Promise<void> {
      const fullPath = path.resolve(this.basePath, dirPath);
      await fs.mkdir(fullPath, { recursive });
    }
    
    async deleteDirectory(dirPath: string, recursive: boolean = true): Promise<void> {
      const fullPath = path.resolve(this.basePath, dirPath);
      await fs.rmdir(fullPath, { recursive });
    }
    
    async listDirectory(dirPath: string): Promise<string[]> {
      const fullPath = path.resolve(this.basePath, dirPath);
      return await fs.readdir(fullPath);
    }
    
    async listDirectoryWithStats(dirPath: string): Promise<Array<{name: string, stats: FileStats}>> {
      const fullPath = path.resolve(this.basePath, dirPath);
      const items = await fs.readdir(fullPath);
      
      const results = await Promise.all(
        items.map(async (item) => {
          const itemPath = path.join(fullPath, item);
          const stats = await fs.stat(itemPath);
          
          return {
            name: item,
            stats: {
              size: stats.size,
              created: stats.birthtime,
              modified: stats.mtime,
              isDirectory: stats.isDirectory(),
              isFile: stats.isFile(),
              permissions: stats.mode.toString(8),
            }
          };
        })
      );
      
      return results;
    }
    
    // File search and discovery
    async findFiles(searchPath: string, options: SearchOptions = {}): Promise<string[]> {
      const {
        recursive = true,
        includeHidden = false,
        fileTypes = [],
        maxDepth = 10,
        pattern
      } = options;
      
      const results: string[] = [];
      
      const search = async (currentPath: string, depth: number = 0): Promise<void> => {
        if (depth > maxDepth) return;
        
        try {
          const items = await fs.readdir(currentPath);
          
          for (const item of items) {
            if (!includeHidden && item.startsWith('.')) continue;
            
            const itemPath = path.join(currentPath, item);
            const stats = await fs.stat(itemPath);
            
            if (stats.isDirectory() && recursive) {
              await search(itemPath, depth + 1);
            } else if (stats.isFile()) {
              // Check file type filter
              if (fileTypes.length > 0) {
                const ext = path.extname(item).toLowerCase();
                if (!fileTypes.includes(ext)) continue;
              }
              
              // Check pattern filter
              if (pattern && !pattern.test(item)) continue;
              
              results.push(path.relative(this.basePath, itemPath));
            }
          }
        } catch (error) {
          // Skip directories we can't access
          console.warn(`Cannot access directory: ${currentPath}`);
        }
      };
      
      const fullSearchPath = path.resolve(this.basePath, searchPath);
      await search(fullSearchPath);
      
      return results;
    }
    
    async findFilesByContent(searchPath: string, contentPattern: RegExp): Promise<Array<{path: string, matches: string[]}>> {
      const files = await this.findFiles(searchPath);
      const results: Array<{path: string, matches: string[]}> = [];
      
      for (const file of files) {
        try {
          const content = await this.readFile(file);
          const matches = content.match(contentPattern);
          
          if (matches) {
            results.push({
              path: file,
              matches: matches
            });
          }
        } catch (error) {
          // Skip files we can't read
          console.warn(`Cannot read file: ${file}`);
        }
      }
      
      return results;
    }
    
    // File manipulation
    async copyFile(sourcePath: string, destPath: string): Promise<void> {
      const fullSourcePath = path.resolve(this.basePath, sourcePath);
      const fullDestPath = path.resolve(this.basePath, destPath);
      
      await fs.mkdir(path.dirname(fullDestPath), { recursive: true });
      await fs.copyFile(fullSourcePath, fullDestPath);
    }
    
    async moveFile(sourcePath: string, destPath: string): Promise<void> {
      const fullSourcePath = path.resolve(this.basePath, sourcePath);
      const fullDestPath = path.resolve(this.basePath, destPath);
      
      await fs.mkdir(path.dirname(fullDestPath), { recursive: true });
      await fs.rename(fullSourcePath, fullDestPath);
    }
    
    async copyDirectory(sourcePath: string, destPath: string): Promise<void> {
      const fullSourcePath = path.resolve(this.basePath, sourcePath);
      const fullDestPath = path.resolve(this.basePath, destPath);
      
      await this.copyDirectoryRecursive(fullSourcePath, fullDestPath);
    }
    
    private async copyDirectoryRecursive(source: string, dest: string): Promise<void> {
      await fs.mkdir(dest, { recursive: true });
      
      const items = await fs.readdir(source);
      
      for (const item of items) {
        const sourceItem = path.join(source, item);
        const destItem = path.join(dest, item);
        
        const stats = await fs.stat(sourceItem);
        
        if (stats.isDirectory()) {
          await this.copyDirectoryRecursive(sourceItem, destItem);
        } else {
          await fs.copyFile(sourceItem, destItem);
        }
      }
    }
    
    // File statistics
    async getFileStats(filePath: string): Promise<FileStats> {
      const fullPath = path.resolve(this.basePath, filePath);
      const stats = await fs.stat(fullPath);
      
      return {
        size: stats.size,
        created: stats.birthtime,
        modified: stats.mtime,
        isDirectory: stats.isDirectory(),
        isFile: stats.isFile(),
        permissions: stats.mode.toString(8),
      };
    }
    
    async getDirectorySize(dirPath: string): Promise<number> {
      const fullPath = path.resolve(this.basePath, dirPath);
      let totalSize = 0;
      
      const calculateSize = async (currentPath: string): Promise<void> => {
        const items = await fs.readdir(currentPath);
        
        for (const item of items) {
          const itemPath = path.join(currentPath, item);
          const stats = await fs.stat(itemPath);
          
          if (stats.isDirectory()) {
            await calculateSize(itemPath);
          } else {
            totalSize += stats.size;
          }
        }
      };
      
      await calculateSize(fullPath);
      return totalSize;
    }
    
    // Utility methods
    async fileExists(filePath: string): Promise<boolean> {
      try {
        const fullPath = path.resolve(this.basePath, filePath);
        await fs.access(fullPath);
        return true;
      } catch {
        return false;
      }
    }
    
    async directoryExists(dirPath: string): Promise<boolean> {
      try {
        const fullPath = path.resolve(this.basePath, dirPath);
        const stats = await fs.stat(fullPath);
        return stats.isDirectory();
      } catch {
        return false;
      }
    }
    
    getRelativePath(filePath: string): string {
      return path.relative(this.basePath, filePath);
    }
    
    getAbsolutePath(filePath: string): string {
      return path.resolve(this.basePath, filePath);
    }
    
    // Batch operations
    async batchOperation(operations: Array<{operation: string, source: string, dest?: string}>): Promise<FileOperation[]> {
      const results: FileOperation[] = [];
      
      for (const op of operations) {
        try {
          switch (op.operation) {
            case 'read':
              await this.readFile(op.source);
              results.push({ operation: 'read', path: op.source, success: true });
              break;
            case 'write':
              if (!op.dest) throw new Error('Destination required for write operation');
              await this.writeFile(op.source, op.dest);
              results.push({ operation: 'write', path: op.source, success: true });
              break;
            case 'delete':
              await this.deleteFile(op.source);
              results.push({ operation: 'delete', path: op.source, success: true });
              break;
            case 'move':
              if (!op.dest) throw new Error('Destination required for move operation');
              await this.moveFile(op.source, op.dest);
              results.push({ operation: 'move', path: op.source, success: true });
              break;
            case 'copy':
              if (!op.dest) throw new Error('Destination required for copy operation');
              await this.copyFile(op.source, op.dest);
              results.push({ operation: 'copy', path: op.source, success: true });
              break;
            default:
              throw new Error(`Unknown operation: ${op.operation}`);
          }
        } catch (error) {
          results.push({
            operation: op.operation as any,
            path: op.source,
            success: false,
            error: error instanceof Error ? error.message : 'Unknown error'
          });
        }
      }
      
      return results;
    }
  } 