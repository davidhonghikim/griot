name: "Vector Operations"
description: "Vector embedding, similarity search, and semantic operations for AI/ML workflows"
category: "ai"
tags:
  primary: "ai"
  secondary: ["vector", "embedding", "similarity", "semantic", "ml", "weaviate"]
  priority: "high"
  complexity: "moderate"
  dependencies: []
  version: "1.0.0"
  created: "2025-06-28"
  updated: "2025-06-28"
  author: "system"
code: |
  export interface VectorConfig {
    dimensions: number;
    distanceMetric: 'cosine' | 'euclidean' | 'manhattan';
    normalize: boolean;
  }
  
  export interface EmbeddingResult {
    vector: number[];
    metadata?: Record<string, any>;
    confidence?: number;
  }
  
  export interface SimilarityResult {
    id: string;
    score: number;
    metadata?: Record<string, any>;
  }
  
  export class VectorOperations {
    private config: VectorConfig;
    
    constructor(config: VectorConfig) {
      this.config = config;
    }
    
    // Vector similarity calculations
    cosineSimilarity(vecA: number[], vecB: number[]): number {
      if (vecA.length !== vecB.length) {
        throw new Error('Vectors must have same dimensions');
      }
      
      let dotProduct = 0;
      let normA = 0;
      let normB = 0;
      
      for (let i = 0; i < vecA.length; i++) {
        dotProduct += vecA[i] * vecB[i];
        normA += vecA[i] * vecA[i];
        normB += vecB[i] * vecB[i];
      }
      
      return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));
    }
    
    euclideanDistance(vecA: number[], vecB: number[]): number {
      if (vecA.length !== vecB.length) {
        throw new Error('Vectors must have same dimensions');
      }
      
      let sum = 0;
      for (let i = 0; i < vecA.length; i++) {
        sum += Math.pow(vecA[i] - vecB[i], 2);
      }
      
      return Math.sqrt(sum);
    }
    
    manhattanDistance(vecA: number[], vecB: number[]): number {
      if (vecA.length !== vecB.length) {
        throw new Error('Vectors must have same dimensions');
      }
      
      let sum = 0;
      for (let i = 0; i < vecA.length; i++) {
        sum += Math.abs(vecA[i] - vecB[i]);
      }
      
      return sum;
    }
    
    // Vector normalization
    normalize(vector: number[]): number[] {
      const magnitude = Math.sqrt(vector.reduce((sum, val) => sum + val * val, 0));
      return vector.map(val => val / magnitude);
    }
    
    // Batch operations
    batchSimilarity(queryVector: number[], vectors: number[][]): number[] {
      return vectors.map(vec => this.cosineSimilarity(queryVector, vec));
    }
    
    // K-nearest neighbors
    findKNearest(queryVector: number[], vectors: Array<{id: string, vector: number[], metadata?: any}>, k: number): SimilarityResult[] {
      const similarities = vectors.map(item => ({
        id: item.id,
        score: this.cosineSimilarity(queryVector, item.vector),
        metadata: item.metadata
      }));
      
      return similarities
        .sort((a, b) => b.score - a.score)
        .slice(0, k);
    }
    
    // Vector clustering
    clusterVectors(vectors: number[][], k: number, maxIterations: number = 100): Array<{centroid: number[], members: number[]}> {
      if (vectors.length === 0) return [];
      
      // Initialize centroids randomly
      const centroids: number[][] = [];
      for (let i = 0; i < k; i++) {
        const randomIndex = Math.floor(Math.random() * vectors.length);
        centroids.push([...vectors[randomIndex]]);
      }
      
      for (let iteration = 0; iteration < maxIterations; iteration++) {
        // Assign vectors to nearest centroid
        const clusters: Array<{centroid: number[], members: number[]}> = centroids.map(centroid => ({
          centroid: [...centroid],
          members: []
        }));
        
        for (let i = 0; i < vectors.length; i++) {
          let bestCluster = 0;
          let bestSimilarity = -1;
          
          for (let j = 0; j < centroids.length; j++) {
            const similarity = this.cosineSimilarity(vectors[i], centroids[j]);
            if (similarity > bestSimilarity) {
              bestSimilarity = similarity;
              bestCluster = j;
            }
          }
          
          clusters[bestCluster].members.push(i);
        }
        
        // Update centroids
        let converged = true;
        for (let i = 0; i < clusters.length; i++) {
          if (clusters[i].members.length === 0) continue;
          
          const newCentroid = new Array(vectors[0].length).fill(0);
          for (const memberIndex of clusters[i].members) {
            for (let j = 0; j < vectors[memberIndex].length; j++) {
              newCentroid[j] += vectors[memberIndex][j];
            }
          }
          
          // Average the vectors
          for (let j = 0; j < newCentroid.length; j++) {
            newCentroid[j] /= clusters[i].members.length;
          }
          
          // Normalize
          const normalizedCentroid = this.normalize(newCentroid);
          
          // Check if centroid changed significantly
          const centroidChange = this.euclideanDistance(clusters[i].centroid, normalizedCentroid);
          if (centroidChange > 0.001) {
            converged = false;
          }
          
          clusters[i].centroid = normalizedCentroid;
        }
        
        if (converged) break;
      }
      
      return clusters;
    }
    
    // Dimensionality reduction (simple PCA-like)
    reduceDimensions(vectors: number[][], targetDimensions: number): number[][] {
      if (targetDimensions >= vectors[0].length) {
        return vectors;
      }
      
      // Simple approach: take first N dimensions
      // In production, you'd use proper PCA or t-SNE
      return vectors.map(vector => vector.slice(0, targetDimensions));
    }
    
    // Vector operations
    addVectors(vecA: number[], vecB: number[]): number[] {
      if (vecA.length !== vecB.length) {
        throw new Error('Vectors must have same dimensions');
      }
      return vecA.map((val, i) => val + vecB[i]);
    }
    
    subtractVectors(vecA: number[], vecB: number[]): number[] {
      if (vecA.length !== vecB.length) {
        throw new Error('Vectors must have same dimensions');
      }
      return vecA.map((val, i) => val - vecB[i]);
    }
    
    multiplyVector(vector: number[], scalar: number): number[] {
      return vector.map(val => val * scalar);
    }
    
    // Utility methods
    generateRandomVector(dimensions: number): number[] {
      return Array.from({length: dimensions}, () => Math.random() * 2 - 1);
    }
    
    validateVector(vector: number[], expectedDimensions?: number): boolean {
      if (!Array.isArray(vector)) return false;
      if (expectedDimensions && vector.length !== expectedDimensions) return false;
      return vector.every(val => typeof val === 'number' && !isNaN(val));
    }
    
    // Vector statistics
    vectorStatistics(vectors: number[][]): {
      mean: number[];
      std: number[];
      min: number[];
      max: number[];
    } {
      if (vectors.length === 0) {
        throw new Error('Cannot compute statistics on empty vector set');
      }
      
      const dimensions = vectors[0].length;
      const mean = new Array(dimensions).fill(0);
      const min = new Array(dimensions).fill(Infinity);
      const max = new Array(dimensions).fill(-Infinity);
      
      // Compute mean, min, max
      for (const vector of vectors) {
        for (let i = 0; i < dimensions; i++) {
          mean[i] += vector[i];
          min[i] = Math.min(min[i], vector[i]);
          max[i] = Math.max(max[i], vector[i]);
        }
      }
      
      for (let i = 0; i < dimensions; i++) {
        mean[i] /= vectors.length;
      }
      
      // Compute standard deviation
      const std = new Array(dimensions).fill(0);
      for (const vector of vectors) {
        for (let i = 0; i < dimensions; i++) {
          std[i] += Math.pow(vector[i] - mean[i], 2);
        }
      }
      
      for (let i = 0; i < dimensions; i++) {
        std[i] = Math.sqrt(std[i] / vectors.length);
      }
      
      return { mean, std, min, max };
    }
  } 