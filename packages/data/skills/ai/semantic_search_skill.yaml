name: "Semantic Search"
description: "Perform semantic search across knowledge base with RAG integration"
category: "ai"
tags:
  primary: "ai"
  secondary: ["search", "semantic", "rag", "knowledge", "retrieval"]
  priority: "high"
  complexity: "moderate"
  dependencies: ["vector_embedding", "knowledge_retrieval"]
  version: "1.0.0"
  created: "2025-01-27"
  updated: "2025-01-27"
  author: "kOS Development Team"

code: |
  export interface SemanticSearchRequest {
    query: string;
    context?: string;
    maxResults?: number;
    similarityThreshold?: number;
    sources?: string[];
    filters?: {
      dateRange?: { start: Date; end: Date };
      tags?: string[];
      categories?: string[];
      confidence?: number;
    };
  }
  
  export interface SearchResult {
    id: string;
    content: string;
    source: string;
    score: number;
    metadata: {
      title?: string;
      author?: string;
      date?: Date;
      tags?: string[];
      categories?: string[];
      confidence: number;
    };
    embeddings?: number[];
    relationships?: {
      type: string;
      targetId: string;
      strength: number;
    }[];
  }
  
  export interface SearchMetadata {
    totalResults: number;
    searchTime: number;
    queryEmbedding?: number[];
    sourcesQueried: string[];
    filtersApplied: any;
  }
  
  export interface SemanticSearchResponse {
    results: SearchResult[];
    metadata: SearchMetadata;
    suggestions?: string[];
    relatedQueries?: string[];
  }
  
  export class SemanticSearchSkill {
    private ragSystem: any; // RAGSystem instance
    private memorySystem: any; // MemorySystem instance
    private embeddingService: any; // EmbeddingService instance
    
    constructor(config: {
      ragSystem: any;
      memorySystem: any;
      embeddingService: any;
      defaultThreshold?: number;
      maxResults?: number;
    }) {
      this.ragSystem = config.ragSystem;
      this.memorySystem = config.memorySystem;
      this.embeddingService = config.embeddingService;
      this.defaultThreshold = config.defaultThreshold || 0.7;
      this.maxResults = config.maxResults || 10;
    }
    
    async search(request: SemanticSearchRequest): Promise<SemanticSearchResponse> {
      const startTime = Date.now();
      
      // 1. Generate query embedding
      const queryEmbedding = await this.embeddingService.generateEmbedding(request.query);
      
      // 2. Search across knowledge base
      const knowledgeResults = await this.ragSystem.search({
        query: request.query,
        embedding: queryEmbedding,
        limit: request.maxResults || this.maxResults,
        threshold: request.similarityThreshold || this.defaultThreshold,
        filters: request.filters
      });
      
      // 3. Search memory for contextual information
      const memoryResults = await this.memorySystem.search({
        query: request.query,
        context: request.context,
        limit: Math.floor((request.maxResults || this.maxResults) * 0.3), // 30% from memory
        includePersistent: true,
        includeContextual: true
      });
      
      // 4. Combine and rank results
      const combinedResults = this.combineAndRankResults(knowledgeResults, memoryResults);
      
      // 5. Generate suggestions and related queries
      const suggestions = await this.generateSuggestions(request.query, combinedResults);
      const relatedQueries = await this.generateRelatedQueries(request.query, combinedResults);
      
      return {
        results: combinedResults.slice(0, request.maxResults || this.maxResults),
        metadata: {
          totalResults: combinedResults.length,
          searchTime: Date.now() - startTime,
          queryEmbedding,
          sourcesQueried: this.getUniqueSources(combinedResults),
          filtersApplied: request.filters
        },
        suggestions,
        relatedQueries
      };
    }
    
    private combineAndRankResults(knowledgeResults: any[], memoryResults: any[]): SearchResult[] {
      const allResults = [...knowledgeResults, ...memoryResults];
      
      // Remove duplicates based on content similarity
      const uniqueResults = this.removeDuplicates(allResults);
      
      // Sort by relevance score
      return uniqueResults.sort((a, b) => b.score - a.score);
    }
    
    private removeDuplicates(results: SearchResult[]): SearchResult[] {
      const seen = new Set<string>();
      const unique: SearchResult[] = [];
      
      for (const result of results) {
        const contentHash = this.hashContent(result.content);
        if (!seen.has(contentHash)) {
          seen.add(contentHash);
          unique.push(result);
        }
      }
      
      return unique;
    }
    
    private hashContent(content: string): string {
      // Simple hash for deduplication
      return content.toLowerCase().replace(/\s+/g, ' ').trim();
    }
    
    private getUniqueSources(results: SearchResult[]): string[] {
      const sources = new Set<string>();
      for (const result of results) {
        sources.add(result.source);
      }
      return Array.from(sources);
    }
    
    private async generateSuggestions(query: string, results: SearchResult[]): Promise<string[]> {
      // Generate search suggestions based on results
      const suggestions: string[] = [];
      
      // Extract common terms from high-scoring results
      const highScoringResults = results.filter(r => r.score > 0.8);
      const commonTerms = this.extractCommonTerms(highScoringResults);
      
      // Generate suggestion variations
      for (const term of commonTerms.slice(0, 3)) {
        suggestions.push(`${query} ${term}`);
      }
      
      return suggestions;
    }
    
    private async generateRelatedQueries(query: string, results: SearchResult[]): Promise<string[]> {
      // Generate related queries based on result metadata
      const relatedQueries: string[] = [];
      
      // Extract tags and categories from results
      const allTags = new Set<string>();
      const allCategories = new Set<string>();
      
      for (const result of results) {
        if (result.metadata.tags) {
          result.metadata.tags.forEach(tag => allTags.add(tag));
        }
        if (result.metadata.categories) {
          result.metadata.categories.forEach(cat => allCategories.add(cat));
        }
      }
      
      // Generate related queries
      for (const tag of Array.from(allTags).slice(0, 2)) {
        relatedQueries.push(`${tag} ${query}`);
      }
      
      for (const category of Array.from(allCategories).slice(0, 2)) {
        relatedQueries.push(`${category} ${query}`);
      }
      
      return relatedQueries;
    }
    
    private extractCommonTerms(results: SearchResult[]): string[] {
      // Extract common terms from result content
      const termFrequency = new Map<string, number>();
      
      for (const result of results) {
        const terms = result.content.toLowerCase()
          .split(/\s+/)
          .filter(term => term.length > 3 && !this.isStopWord(term));
        
        for (const term of terms) {
          termFrequency.set(term, (termFrequency.get(term) || 0) + 1);
        }
      }
      
      // Return most frequent terms
      return Array.from(termFrequency.entries())
        .sort((a, b) => b[1] - a[1])
        .slice(0, 5)
        .map(([term]) => term);
    }
    
    private isStopWord(word: string): boolean {
      const stopWords = new Set([
        'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for',
        'of', 'with', 'by', 'is', 'are', 'was', 'were', 'be', 'been', 'being'
      ]);
      return stopWords.has(word);
    }
    
    // Batch search for multiple queries
    async batchSearch(requests: SemanticSearchRequest[]): Promise<SemanticSearchResponse[]> {
      const responses: SemanticSearchResponse[] = [];
      
      for (const request of requests) {
        try {
          const response = await this.search(request);
          responses.push(response);
        } catch (error) {
          responses.push({
            results: [],
            metadata: {
              totalResults: 0,
              searchTime: 0,
              sourcesQueried: [],
              filtersApplied: request.filters
            }
          });
        }
      }
      
      return responses;
    }
    
    // Update search index with new content
    async updateIndex(content: string, metadata: any): Promise<void> {
      await this.ragSystem.indexDocument(content, metadata);
    }
    
    // Get search statistics
    async getSearchStats(): Promise<{
      totalDocuments: number;
      averageSearchTime: number;
      popularQueries: string[];
      searchAccuracy: number;
    }> {
      return {
        totalDocuments: await this.ragSystem.getDocumentCount(),
        averageSearchTime: await this.ragSystem.getAverageSearchTime(),
        popularQueries: await this.ragSystem.getPopularQueries(),
        searchAccuracy: await this.ragSystem.getSearchAccuracy()
      };
    }
  }

examples:
  basic_search: |
    const searchSkill = new SemanticSearchSkill({
      ragSystem: ragSystemInstance,
      memorySystem: memorySystemInstance,
      embeddingService: embeddingServiceInstance
    });
    
    const results = await searchSkill.search({
      query: "How to implement RAG systems?",
      maxResults: 10,
      similarityThreshold: 0.8
    });
    
    console.log(`Found ${results.results.length} relevant results`);
    console.log(`Search took ${results.metadata.searchTime}ms`);

  contextual_search: |
    const results = await searchSkill.search({
      query: "memory management",
      context: "Previous conversation about agent memory systems",
      filters: {
        tags: ["memory", "agents"],
        categories: ["system-design"],
        dateRange: {
          start: new Date("2024-01-01"),
          end: new Date()
        }
      }
    });

  batch_search: |
    const requests = [
      { query: "RAG implementation" },
      { query: "Memory systems" },
      { query: "Vector databases" }
    ];
    
    const batchResults = await searchSkill.batchSearch(requests);
    
    for (let i = 0; i < batchResults.length; i++) {
      console.log(`Query "${requests[i].query}": ${batchResults[i].results.length} results`);
    }

dependencies:
  - "rag_system"
  - "memory_system"
  - "embedding_service"
  - "vector_utils"

performance:
  average_response_time: "50-100ms"
  memory_usage: "Low"
  scalability: "High"
  accuracy: "85-95%"

security:
  data_encryption: true
  access_control: true
  audit_logging: true
  privacy_compliance: true 