# kOS Agent Documentation Storage, Validation, and Pruning System

## üìç Node Class: **Skald** (Documentation, Narrative, Knowledge Continuity)

---

## ‚úÖ System Purpose

A fully AI-compatible, human-readable, open-source, and DB-migration-friendly **Documentation + Changelog + Metrics + Analysis + Pruning + Validation + Export System** for all kOS agents, optimized for both large context window AI use and structured DB storage.

---

## ‚úÖ Architecture Overview

### Core Layers:

| Layer                        | Function                                                        |
| ---------------------------- | --------------------------------------------------------------- |
| **Filesystem Layer (Now)**   | Flat files in JSON, YAML, and Markdown with frontmatter         |
| **Schema Layer**             | JSON Schema / YAML Schema for each doc type                     |
| **Manifest Layer**           | Central `system_manifest.json` (registry of all docs with meta) |
| **Validation Layer**         | Pre-save and pre-commit JSON/YAML/Markdown validator CLI        |
| **Pruning Layer**            | Smart script for archive reduction and log summarization        |
| **Export Layer (Migration)** | Batch dump JSON and MD into DB-importable JSONL or NDJSON       |
| **Optional Future**          | Connectors for PostgreSQL, MongoDB, Neo4j, Weaviate             |

## ‚úÖ Target Technologies (JS Ecosystem)

| Function               | Recommended Tools                          |
| ---------------------- | ------------------------------------------ |
| JSON Schema Validation | `ajv` (Another JSON Schema Validator)      |
| Markdown Parsing / AST | `markdown-it`, `unified`, or `remark`      |
| Frontmatter Parsing    | `gray-matter`                              |
| File System Walk       | `fast-glob`, `fs-extra`, Node.js `fs` APIs |
| CLI Tooling            | Node.js scripts (ESM or CJS)               |
| Archive and Pruning    | Node.js scripts, optional cronjob          |
| Export                 | Node.js JSON flattener / JSONL writer      |

## ‚úÖ Directory Layout (For Now)

```plaintext
/agents
‚îú‚îÄ‚îÄ bootstrap/
‚îú‚îÄ‚îÄ config/
‚îú‚îÄ‚îÄ handoff/
‚îú‚îÄ‚îÄ analysis/
‚îú‚îÄ‚îÄ performance/
‚îú‚îÄ‚îÄ implementation-plans/
‚îú‚îÄ‚îÄ archive/
‚îú‚îÄ‚îÄ scripts/
‚îÇ   ‚îú‚îÄ‚îÄ validate-docs.js
‚îÇ   ‚îú‚îÄ‚îÄ generate-manifest.js
‚îÇ   ‚îú‚îÄ‚îÄ prune-archives.js
‚îÇ   ‚îî‚îÄ‚îÄ export-for-db.js
‚îî‚îÄ‚îÄ system_manifest.json
```

## ‚úÖ Required JSON Schemas (Minimum Set for Now)

- `plan-schema.json`
- `changelog-schema.json`
- `performance-schema.json`
- `handoff-schema.json`
- `analysis-schema.json`
- Optional: `manifest-schema.json`

## ‚úÖ Smart Pruning System Design

| Mode                    | Behavior                                                             |
| ----------------------- | -------------------------------------------------------------------- |
| **Log Pruning**         | Auto-summarize low-value log lines, preserve error/fix summaries     |
| **Changelog Pruning**   | Collapse minor changelog entries into daily/weekly summaries         |
| **Performance Pruning** | Drop raw metrics after X months, keep rollups                        |
| **Plan Pruning**        | Keep all completed plans, prune backlog of cancelled/abandoned plans |
| **Analysis Pruning**    | Never prune; always archive                                          |
| **Export Before Prune** | Auto-run `export-for-db.js` before any destructive prune             |

---

## ‚úÖ Script Descriptions

### 1. `validate-docs.js`

- Validate all JSON, YAML, and Markdown files
- Enforce frontmatter standards
- JSON Schema checks per doc type
- Optional: Auto-fix minor issues (missing fields, bad indentation)

### 2. `generate-manifest.js`

- Recursively scans `/agents/`
- Builds/upserts `system_manifest.json`
- Captures: `file_path`, `doc_type`, `timestamp`, `last_updated`, `author`, `status`

### 3. `prune-archives.js`

- Accepts CLI args: prune mode, retention period, target systems (logs, changelog, metrics, etc.)
- Creates `pre_prune_backup/`
- Moves pruned files to backup before deletion
- Writes summary report of prune actions

### 4. `export-for-db.js`

- Outputs all JSON/YAML/Markdown into **single JSONL export per system**
- Compatible with Postgres `COPY`, Mongo `mongoimport`, or vector DB loaders
- Options: full export / delta export / by date range

---

## ‚úÖ Frontmatter Standard (For ALL .md files)

```yaml
---
doc_type: "implementation-plan"  # or changelog, analysis, etc.
doc_id: "plan_2025_06_rag_storage"
timestamp: "2025-06-29T15:30:00Z"
author: "agent_name"
version: "1.0"
status: "active|completed|archived"
tags: ["migration", "storage", "metrics"]
---
```

## ‚úÖ AI Agent Prompt Guardrail Snippet (Embed in System Prompts)

```
Before outputting any file:
- Query current JSON/YAML/Markdown schemas
- Use correct directory, filename, and timestamp prefix
- Validate output JSON or YAML against schema
- Include full YAML frontmatter block if Markdown
- Respect kOS archive and timestamp naming conventions
```

## ‚úÖ Future Migration Steps (DB Phase)

1. Run `export-for-db.js`
2. Validate data files
3. Use Postgres/Mongo import tools, or ETL pipeline
4. Optional: Add Vector DB embedding step for AI semantic search
5. Switch LLM agents to pull context from DB instead of filesystem

## ‚úÖ License Recommendation for Scripts

- **Apache 2.0** or **MIT** for full open source compatibility with KLF and broader ecosystem

---

## ‚úÖ Summary:

This Skald-class kOS system ensures that all documentation, changelogs, plans, and performance metrics stay AI-friendly, schema-valid, human-readable, and database-migration-ready. Pruning scripts reduce long-term bloat while preserving critical project history.

---

**Next Steps:**

- Want me to generate sample Node.js scripts for each?
- Want me to generate missing JSON schemas?
- Want an AI prompt template for agent-level format enforcement?

Reply with a number:

1. Scripts
2. JSON Schemas
3. Agent Prompts
4. All of the above

