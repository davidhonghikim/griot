{
  "version": "1.0",
  "last_updated": "2025-06-29",
  "active_plans": [
    {
      "id": "rag-storage-implementation",
      "title": "RAG and Storage Systems Implementation Plan",
      "status": "active",
      "priority": "high",
      "created": "2025-06-28",
      "overview": "Integration between kOS persona system and existing RAG and storage infrastructure to create comprehensive knowledge management platform",
      "phases": [
        {
          "id": "phase-1",
          "name": "Persona Vectorization and Storage",
          "priority": "high",
          "tasks": [
            {
              "id": "task-1.1",
              "name": "Create PersonaVectorizationService",
              "objective": "Vectorize persona content for RAG operations and store in Weaviate",
              "files_to_create": [
                "packages/data/core/rag/persona_vectorization_service.ts",
                "packages/data/skills/ai/persona_vectorization.yaml"
              ],
              "implementation": {
                "class_name": "PersonaVectorizationService",
                "dependencies": [
                  "VectorStore",
                  "EmbeddingService", 
                  "PersonaLoader"
                ],
                "methods": [
                  "vectorizePersona(personaId: string): Promise<void>",
                  "vectorizeAllPersonas(): Promise<void>",
                  "updatePersonaVectors(personaId: string): Promise<void>"
                ]
              },
              "success_criteria": [
                "All existing personas vectorized and stored in Weaviate",
                "Vectorization completes in < 5 seconds per persona",
                "Proper metadata stored with each vector",
                "Update mechanism works for persona changes"
              ],
              "status": "completed"
            },
            {
              "id": "task-1.2",
              "name": "Design Database Schema",
              "objective": "Create MongoDB collections and Neo4j graph schema for personas",
              "files_to_create": [
                "packages/schemas/src/persona.ts",
                "packages/schemas/src/persona_memory.ts",
                "packages/schemas/src/persona_relationships.ts"
              ],
              "database_schemas": {
                "mongodb": {
                  "collections": [
                    {
                      "name": "personas",
                      "schema": {
                        "id": "string",
                        "uuid": "string", 
                        "name": "string",
                        "base": "string",
                        "variant": "string",
                        "author": "string",
                        "description": "string",
                        "tags": "string[]",
                        "content": {
                          "yaml": "string",
                          "parsed": "any"
                        },
                        "vectorId": "string",
                        "createdAt": "Date",
                        "updatedAt": "Date"
                      }
                    },
                    {
                      "name": "persona_memories",
                      "schema": {
                        "id": "string",
                        "personaId": "string",
                        "interactionType": "enum:query,response,learning",
                        "content": "string",
                        "context": "Record<string, any>",
                        "timestamp": "Date",
                        "vectorId": "string",
                        "relevance": "number"
                      }
                    }
                  ]
                },
                "neo4j": {
                  "constraints": [
                    "CREATE CONSTRAINT persona_id IF NOT EXISTS FOR (p:Persona) REQUIRE p.id IS UNIQUE",
                    "CREATE CONSTRAINT skill_id IF NOT EXISTS FOR (s:Skill) REQUIRE s.id IS UNIQUE",
                    "CREATE CONSTRAINT knowledge_id IF NOT EXISTS FOR (k:Knowledge) REQUIRE k.id IS UNIQUE"
                  ],
                  "relationships": [
                    "(p:Persona)-[:USES_SKILL {strength: number}]->(s:Skill)",
                    "(p:Persona)-[:HAS_KNOWLEDGE {relevance: number}]->(k:Knowledge)"
                  ]
                }
              },
              "success_criteria": [
                "MongoDB collections created with proper indexes",
                "Neo4j constraints and indexes created",
                "Schema validation working",
                "Migration scripts tested"
              ],
              "status": "pending"
            },
            {
              "id": "task-1.3",
              "name": "Create Migration Scripts",
              "objective": "Migrate existing persona files to database storage",
              "files_to_create": [
                "scripts/migrate-personas-to-db.ts",
                "scripts/validate-migration.ts"
              ],
              "implementation": {
                "class_name": "PersonaMigrationService",
                "methods": [
                  "migratePersonasToDatabase(): Promise<void>",
                  "createGraphRelationships(persona: any): Promise<void>"
                ]
              },
              "success_criteria": [
                "All persona files migrated to MongoDB",
                "Graph relationships created in Neo4j",
                "Migration validation passes",
                "Rollback mechanism tested"
              ],
              "status": "pending"
            }
          ]
        },
        {
          "id": "phase-2",
          "name": "RAG Operations Extension",
          "priority": "medium",
          "tasks": [
            {
              "id": "task-2.1",
              "name": "Extend RAG Operations",
              "objective": "Add persona context to RAG requests and implement persona-aware document retrieval",
              "files_to_create": [
                "packages/data/core/rag/persona_rag_service.ts",
                "packages/data/skills/ai/persona_rag.yaml"
              ],
              "implementation": {
                "interfaces": [
                  "PersonaRAGRequest",
                  "PersonaRAGResponse",
                  "PersonaContext"
                ],
                "methods": [
                  "searchWithPersonaContext(request: PersonaRAGRequest): Promise<PersonaRAGResponse>",
                  "selectRelevantPersonas(query: string): Promise<string[]>",
                  "rankResultsByPersonaRelevance(results: any[], personaId: string): Promise<any[]>"
                ]
              },
              "success_criteria": [
                "Persona-aware RAG requests working",
                "Document retrieval considers persona context",
                "Response time < 200ms for persona-aware queries",
                "Persona selection algorithm implemented"
              ],
              "status": "pending"
            }
          ]
        }
      ],
      "dependencies": [
        "Existing RAG infrastructure",
        "Weaviate vector store",
        "MongoDB database",
        "Neo4j graph database"
      ],
      "risks": [
        "Performance impact of persona-aware queries",
        "Data consistency between vector store and databases",
        "Migration complexity for existing personas"
      ],
      "metrics": {
        "performance_targets": {
          "vectorization_time": "< 5 seconds per persona",
          "query_response_time": "< 200ms",
          "memory_operations": "< 100ms"
        },
        "quality_targets": {
          "persona_relevance": "> 90%",
          "knowledge_coverage": "> 95%",
          "system_uptime": "> 99.9%"
        }
      }
    }
  ],
  "backlog": [
    {
      "id": "kos-starseed-restructure",
      "title": "kOS Starseed Restructure",
      "status": "backlog",
      "priority": "medium",
      "created": "2025-06-28",
      "description": "Restructure kOS project for better organization and scalability"
    }
  ],
  "templates": {
    "plan_structure": {
      "required_sections": [
        "overview",
        "phases",
        "tasks",
        "success_criteria",
        "dependencies",
        "risks",
        "metrics"
      ],
      "task_format": {
        "id": "string",
        "name": "string", 
        "objective": "string",
        "files_to_create": "string[]",
        "implementation": "object",
        "success_criteria": "string[]",
        "status": "enum:pending,in_progress,completed,blocked"
      }
    }
  }
} 