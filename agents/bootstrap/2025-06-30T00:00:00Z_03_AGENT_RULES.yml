title: "Agent Development Rules & Workflow"
introduction: |
  This document contains the mandatory rules and workflow for any AI agent working on this project. Non-compliance is not an option. This workflow is designed to ensure stability, prevent regressions, and create a high-quality, maintainable codebase.

core_principle:
  title: "Proactive Verification"
  description: |
    The primary goal is not just to produce a successful build, but to holistically improve the project. The agent must not wait for the user to find errors. The agent must proactively find and fix errors as it works.

mandatory_workflow:
  title: "The Mandatory Workflow"
  steps:
    - title: "Understand the Request"
      instruction: "Before writing any code, fully understand the user's request. Review the `Issues_And_Requests.md` document and any relevant existing documentation."
    - title: "Formulate a Plan"
      instruction: "Create a clear, step-by-step plan to implement the solution."
    - title: "Create and Maintain an Execution Plan"
      points:
        - "For any given task, create a detailed `Execution_Plan.md` in the `md/agent/` directory."
        - "This document is your **single source of truth**. Do not improvise or deviate from it."
        - "As you complete each step, you **must** update the plan with a comprehensive log of your actions. This includes:"
      log_includes:
        - "Timestamps for major actions."
        - "Specific filenames, functions, and line numbers you analyzed or modified."
        - "Detailed findings from your analysis."
        - "Any errors encountered and the exact steps taken to fix them."
        - "The log must be detailed enough for another agent to replicate your work and achieve the same outcome."
        - "This living document is your primary work log."
    - title: "The \"Five-Edit\" Rule (Iterative Review)"
      instruction: "After making three - five significant edits (e.g., refactoring a component, modifying a state store), you **must stop**."
      review_process:
        intro: "You will then perform a **Mid-Progress Review**. This is not optional."
        steps:
          - "**Read Entire Files:** Read the complete source code of the files you have just edited. Do not rely on your memory or a partial view. Only build if we are working on code files and not documents or other non-code files."
          - "**Trace the Logic:** Mentally (or by writing it down in your thought process) trace the logic flow. Consider edge cases. Ask yourself: \"How could this break? What dependencies have I affected?\""
          - "**Check for Common Errors:** Explicitly look for missing imports, incorrect module paths, type mismatches, and other common integration errors."
          - "**Fix and Document:** If you find a problem, fix it immediately. Document the finding and the fix in your agent log."
          - "**Re-read Core Docs:** After fixing any self-identified issues, re-read `md/16_Issues_And_Requests.md`, `md/agent/01_Rules.md`, and the relevant files in `documentation/` to ensure your plan is still aligned with the project's requirements and architecture."
    - title: "Final Verification"
      instruction: "Once you believe your entire plan is implemented, perform a final, full verification."
      actions:
        - "**Run the Build:** Execute `npm run build` and check for any compilation or type errors."
        - "**Fix Holistically:** If there are build errors, do not fix them one-by-one. Analyze the root cause and apply a holistic fix. If you are stuck, say so. Do not guess."
    - title: "Handling Tool Failures"
      instruction: "If a tool (e.g., `edit_file`) repeatedly fails to apply a change correctly after 2-3 attempts, do not continue trying."
      fallback:
        intro: "**Fallback to Temp File Swap:** Use this procedure to forcefully overwrite the target file:"
        steps:
          - "Read the full content of the target file."
          - "Make your intended changes to the content in memory."
          - "Create a temporary file (e.g., `target_file.tmp.ts`) and write the complete, corrected content into it."
          - "Use `run_terminal_cmd` to rename/move the temporary file to replace the original file (e.g., `mv target_file.tmp.ts target_file.ts`)."
        outro: "This fallback avoids wasting time on inexplicable tool errors, such as those caused by whitespace, invisible characters, or caching issues."
    - title: "Documentation Update"
      instruction: "Update any and all relevant documentation. This includes the Knowledge Base, component documentation, architectural diagrams, and your own agent log."
    - title: "Commits and Version Control"
      points:
        - "**Do not commit code unless explicitly asked to do so by the user.** The user manages the version history."
        - "Follow the Git feature branching strategy outlined in the project documentation."
    - title: "User Verification is Final"
      instruction: "**Do not mark any task, fix, or plan as \"complete\" or \"done\" until the user explicitly confirms it is working as they expect.** My own verification (e.g., a successful build) is not sufficient. The user is the final arbiter of success."

check_existing_code:
  title: "CRITICAL: Check Existing Code Before Creating New Files"
  requirement: "MANDATORY REQUIREMENT: Before creating any new files, services, adapters, skills, recipes, or modules, you **MUST** thoroughly search and review existing code to avoid duplication and ensure proper integration."
  bootstrapping_steps:
    title: "Required Bootstrapping Steps"
    steps:
      - title: "Check Index Files First"
        instruction: "Always start by reading the relevant index files to understand the project structure"
        files:
          - "**AI-Q Index**: `ai-q/00_Index.md` - The definitive source of truth for the project"
          - "**Service Connectors Index**: `packages/service-connectors/src/index.ts` and `all.ts` - All available service definitions"
          - "**Data Package Index**: `packages/data/00_Index.md` - Skills, recipes, adapters, and personas"
          - "**Node Specifications Index**: `ai-q/03_node_specifications/00_Node_Specifications_Index.md` - All 13 node types"
          - "**Analysis Index**: `agents/analysis/00_Analysis_Index.md` - Previous analysis and findings"
      - title: "Semantic Search"
        instruction: "Use `codebase_search` to find existing implementations related to your task"
        searches:
          - "Search for service definitions, adapters, skills, recipes, modules"
          - "Look for similar functionality or integrations"
          - "Check for existing Docker configurations, API integrations, etc."
      - title: "File Search"
        instruction: "Use `file_search` to locate specific files by name or pattern"
        searches:
          - "Search for existing service connectors, adapters, or modules"
          - "Look for Docker Compose files, configuration files, etc."
          - "Check for existing test files or documentation"
      - title: "Grep Search"
        instruction: "Use `grep_search` for exact text matches"
        searches:
          - "Search for specific class names, function names, or imports"
          - "Look for existing API endpoints, service definitions, etc."
          - "Check for configuration patterns or environment variables"
      - title: "Directory Exploration"
        instruction: "Use `list_dir` to explore relevant directories"
        directories:
          - "Check `packages/service-connectors/` for existing service definitions"
          - "Look in `packages/data/skills/` for existing skills and recipes"
          - "Explore `apps/` for existing applications or services"
          - "Check `docker-compose.yml` and related configuration files"
  integration_requirements:
    title: "Integration Requirements"
    requirements:
      - "Reuse Existing Services: If a service definition already exists, extend it rather than creating a new one"
      - "Leverage Existing Adapters: Use existing adapter patterns and extend them for new functionality"
      - "Build on Existing Skills: Extend existing skills rather than creating duplicate functionality"
      - "Follow Established Patterns: Use the same naming conventions, file structures, and integration patterns"
      - "Update Existing Configurations: Modify existing Docker Compose files rather than creating new ones"
  documentation_of_findings:
    title: "Documentation of Findings"
    instruction: "In your agent log, document:"
    points:
      - "What index files you reviewed and what you learned"
      - "What existing code you found and reviewed"
      - "How you integrated with or extended existing functionality"
      - "Why you chose to create new files (if any) and how they complement existing code"
      - "Any conflicts or overlaps you discovered and how you resolved them"
  warning: "Failure to follow this requirement will result in code duplication, integration issues, and maintenance problems."

debugging_workflow:
  title: "The Debugging Workflow: Evidence-Based and Test-Driven"
  instruction: "When a user reports that a fix has failed or a regression has occurred, the standard workflow is insufficient. You must immediately switch to this more rigorous debugging workflow."
  steps:
    - title: "Stop and Analyze"
      instruction: "Do not attempt another fix immediately. Acknowledge the failure and begin a holistic analysis of the problem."
    - title: "Form a Testable Hypothesis"
      instruction: "Based on the failure, form a specific, testable hypothesis about the root cause."
    - title: "Create an Inline Test"
      points:
        - "If a formal testing framework is not available, create a temporary, inline test within the application (e.g., in a `main.tsx` or popup entry point)."
        - "This test's purpose is to provide **objective, undeniable proof** of the bug. It must fail in a way that clearly demonstrates the problem."
        - "The test should use `console.log` and `console.assert` to check the actual output of functions against the expected output."
    - title: "Implement the Fix"
      instruction: "With the failing test in place, implement the code changes to fix the bug."
    - title: "Verify with the Test"
      instruction: "Re-run the test. It must now pass. This is your primary verification, not just a successful build."
    - title: "Clean Up and Proceed"
      instruction: "Once the test passes and the build is successful, remove the temporary test code and present your evidence-based fix to the user." 